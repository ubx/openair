/*
* generated by Xtext
*/
grammar InternalOpenAir;

options {
	superClass=AbstractInternalContentAssistParser;
	
}

@lexer::header {
package www.ubx.ch.ui.contentassist.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.Lexer;
}

@parser::header {
package www.ubx.ch.ui.contentassist.antlr.internal; 

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.xtext.parsetree.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.DFA;
import www.ubx.ch.services.OpenAirGrammarAccess;

}

@parser::members {
 
 	private OpenAirGrammarAccess grammarAccess;
 	
    public void setGrammarAccess(OpenAirGrammarAccess grammarAccess) {
    	this.grammarAccess = grammarAccess;
    }
    
    @Override
    protected Grammar getGrammar() {
    	return grammarAccess.getGrammar();
    }
    
    @Override
    protected String getValueForTokenName(String tokenName) {
    	return tokenName;
    }

}




// Entry rule entryRuleOpenAir
entryRuleOpenAir 
:
{ before(grammarAccess.getOpenAirRule()); }
	 ruleOpenAir
{ after(grammarAccess.getOpenAirRule()); } 
	 EOF 
;

// Rule OpenAir
ruleOpenAir
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getOpenAirAccess().getAirspacesAssignment()); }
(rule__OpenAir__AirspacesAssignment)*
{ after(grammarAccess.getOpenAirAccess().getAirspacesAssignment()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleAirspace
entryRuleAirspace 
:
{ before(grammarAccess.getAirspaceRule()); }
	 ruleAirspace
{ after(grammarAccess.getAirspaceRule()); } 
	 EOF 
;

// Rule Airspace
ruleAirspace
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getAirspaceAccess().getGroup()); }
(rule__Airspace__Group__0)
{ after(grammarAccess.getAirspaceAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleTheDef
entryRuleTheDef 
:
{ before(grammarAccess.getTheDefRule()); }
	 ruleTheDef
{ after(grammarAccess.getTheDefRule()); } 
	 EOF 
;

// Rule TheDef
ruleTheDef
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getTheDefAccess().getGroup()); }
(rule__TheDef__Group__0)
{ after(grammarAccess.getTheDefAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleAsClass
entryRuleAsClass 
:
{ before(grammarAccess.getAsClassRule()); }
	 ruleAsClass
{ after(grammarAccess.getAsClassRule()); } 
	 EOF 
;

// Rule AsClass
ruleAsClass
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getAsClassAccess().getGroup()); }
(rule__AsClass__Group__0)
{ after(grammarAccess.getAsClassAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleSP
entryRuleSP 
:
{ before(grammarAccess.getSPRule()); }
	 ruleSP
{ after(grammarAccess.getSPRule()); } 
	 EOF 
;

// Rule SP
ruleSP
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getSPAccess().getGroup()); }
(rule__SP__Group__0)
{ after(grammarAccess.getSPAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleSB
entryRuleSB 
:
{ before(grammarAccess.getSBRule()); }
	 ruleSB
{ after(grammarAccess.getSBRule()); } 
	 EOF 
;

// Rule SB
ruleSB
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getSBAccess().getGroup()); }
(rule__SB__Group__0)
{ after(grammarAccess.getSBAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleAsName
entryRuleAsName 
:
{ before(grammarAccess.getAsNameRule()); }
	 ruleAsName
{ after(grammarAccess.getAsNameRule()); } 
	 EOF 
;

// Rule AsName
ruleAsName
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getAsNameAccess().getGroup()); }
(rule__AsName__Group__0)
{ after(grammarAccess.getAsNameAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleLimites
entryRuleLimites 
:
{ before(grammarAccess.getLimitesRule()); }
	 ruleLimites
{ after(grammarAccess.getLimitesRule()); } 
	 EOF 
;

// Rule Limites
ruleLimites
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getLimitesAccess().getAlternatives()); }
(rule__Limites__Alternatives)
{ after(grammarAccess.getLimitesAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleLLimit
entryRuleLLimit 
:
{ before(grammarAccess.getLLimitRule()); }
	 ruleLLimit
{ after(grammarAccess.getLLimitRule()); } 
	 EOF 
;

// Rule LLimit
ruleLLimit
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getLLimitAccess().getGroup()); }
(rule__LLimit__Group__0)
{ after(grammarAccess.getLLimitAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleHLimit
entryRuleHLimit 
:
{ before(grammarAccess.getHLimitRule()); }
	 ruleHLimit
{ after(grammarAccess.getHLimitRule()); } 
	 EOF 
;

// Rule HLimit
ruleHLimit
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getHLimitAccess().getGroup()); }
(rule__HLimit__Group__0)
{ after(grammarAccess.getHLimitAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleTheGeom
entryRuleTheGeom 
:
{ before(grammarAccess.getTheGeomRule()); }
	 ruleTheGeom
{ after(grammarAccess.getTheGeomRule()); } 
	 EOF 
;

// Rule TheGeom
ruleTheGeom
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getTheGeomAccess().getAlternatives()); }
(rule__TheGeom__Alternatives)
{ after(grammarAccess.getTheGeomAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleLowLimit
entryRuleLowLimit 
:
{ before(grammarAccess.getLowLimitRule()); }
	 ruleLowLimit
{ after(grammarAccess.getLowLimitRule()); } 
	 EOF 
;

// Rule LowLimit
ruleLowLimit
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getLowLimitAccess().getGroup()); }
(rule__LowLimit__Group__0)
{ after(grammarAccess.getLowLimitAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleHighLimit
entryRuleHighLimit 
:
{ before(grammarAccess.getHighLimitRule()); }
	 ruleHighLimit
{ after(grammarAccess.getHighLimitRule()); } 
	 EOF 
;

// Rule HighLimit
ruleHighLimit
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getHighLimitAccess().getGroup()); }
(rule__HighLimit__Group__0)
{ after(grammarAccess.getHighLimitAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleLimit
entryRuleLimit 
:
{ before(grammarAccess.getLimitRule()); }
	 ruleLimit
{ after(grammarAccess.getLimitRule()); } 
	 EOF 
;

// Rule Limit
ruleLimit
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getLimitAccess().getAlternatives()); }
(rule__Limit__Alternatives)
{ after(grammarAccess.getLimitAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleFL
entryRuleFL 
:
{ before(grammarAccess.getFLRule()); }
	 ruleFL
{ after(grammarAccess.getFLRule()); } 
	 EOF 
;

// Rule FL
ruleFL
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getFLAccess().getGroup()); }
(rule__FL__Group__0)
{ after(grammarAccess.getFLAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleSFC
entryRuleSFC 
:
{ before(grammarAccess.getSFCRule()); }
	 ruleSFC
{ after(grammarAccess.getSFCRule()); } 
	 EOF 
;

// Rule SFC
ruleSFC
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getSFCAccess().getGroup()); }
(rule__SFC__Group__0)
{ after(grammarAccess.getSFCAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleGND
entryRuleGND 
:
{ before(grammarAccess.getGNDRule()); }
	 ruleGND
{ after(grammarAccess.getGNDRule()); } 
	 EOF 
;

// Rule GND
ruleGND
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getGNDAccess().getGroup()); }
(rule__GND__Group__0)
{ after(grammarAccess.getGNDAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleUNL
entryRuleUNL 
:
{ before(grammarAccess.getUNLRule()); }
	 ruleUNL
{ after(grammarAccess.getUNLRule()); } 
	 EOF 
;

// Rule UNL
ruleUNL
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getUNLAccess().getGroup()); }
(rule__UNL__Group__0)
{ after(grammarAccess.getUNLAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleVAL
entryRuleVAL 
:
{ before(grammarAccess.getVALRule()); }
	 ruleVAL
{ after(grammarAccess.getVALRule()); } 
	 EOF 
;

// Rule VAL
ruleVAL
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getVALAccess().getGroup()); }
(rule__VAL__Group__0)
{ after(grammarAccess.getVALAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleV
entryRuleV 
:
{ before(grammarAccess.getVRule()); }
	 ruleV
{ after(grammarAccess.getVRule()); } 
	 EOF 
;

// Rule V
ruleV
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getVAccess().getGroup()); }
(rule__V__Group__0)
{ after(grammarAccess.getVAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleVsub
entryRuleVsub 
:
{ before(grammarAccess.getVsubRule()); }
	 ruleVsub
{ after(grammarAccess.getVsubRule()); } 
	 EOF 
;

// Rule Vsub
ruleVsub
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getVsubAccess().getAlternatives()); }
(rule__Vsub__Alternatives)
{ after(grammarAccess.getVsubAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleD
entryRuleD 
:
{ before(grammarAccess.getDRule()); }
	 ruleD
{ after(grammarAccess.getDRule()); } 
	 EOF 
;

// Rule D
ruleD
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getDAccess().getAlternatives()); }
(rule__D__Alternatives)
{ after(grammarAccess.getDAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleDC
entryRuleDC 
:
{ before(grammarAccess.getDCRule()); }
	 ruleDC
{ after(grammarAccess.getDCRule()); } 
	 EOF 
;

// Rule DC
ruleDC
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getDCAccess().getGroup()); }
(rule__DC__Group__0)
{ after(grammarAccess.getDCAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleDP
entryRuleDP 
:
{ before(grammarAccess.getDPRule()); }
	 ruleDP
{ after(grammarAccess.getDPRule()); } 
	 EOF 
;

// Rule DP
ruleDP
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getDPAccess().getGroup()); }
(rule__DP__Group__0)
{ after(grammarAccess.getDPAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRulePoint
entryRulePoint 
:
{ before(grammarAccess.getPointRule()); }
	 rulePoint
{ after(grammarAccess.getPointRule()); } 
	 EOF 
;

// Rule Point
rulePoint
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getPointAccess().getAlternatives()); }
(rule__Point__Alternatives)
{ after(grammarAccess.getPointAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRulePoint1
entryRulePoint1 
:
{ before(grammarAccess.getPoint1Rule()); }
	 rulePoint1
{ after(grammarAccess.getPoint1Rule()); } 
	 EOF 
;

// Rule Point1
rulePoint1
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getPoint1Access().getGroup()); }
(rule__Point1__Group__0)
{ after(grammarAccess.getPoint1Access().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRulePoint2
entryRulePoint2 
:
{ before(grammarAccess.getPoint2Rule()); }
	 rulePoint2
{ after(grammarAccess.getPoint2Rule()); } 
	 EOF 
;

// Rule Point2
rulePoint2
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getPoint2Access().getGroup()); }
(rule__Point2__Group__0)
{ after(grammarAccess.getPoint2Access().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRulePoint3
entryRulePoint3 
:
{ before(grammarAccess.getPoint3Rule()); }
	 rulePoint3
{ after(grammarAccess.getPoint3Rule()); } 
	 EOF 
;

// Rule Point3
rulePoint3
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getPoint3Access().getGroup()); }
(rule__Point3__Group__0)
{ after(grammarAccess.getPoint3Access().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRulePoint4
entryRulePoint4 
:
{ before(grammarAccess.getPoint4Rule()); }
	 rulePoint4
{ after(grammarAccess.getPoint4Rule()); } 
	 EOF 
;

// Rule Point4
rulePoint4
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getPoint4Access().getGroup()); }
(rule__Point4__Group__0)
{ after(grammarAccess.getPoint4Access().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleLongDegr
entryRuleLongDegr 
:
{ before(grammarAccess.getLongDegrRule()); }
	 ruleLongDegr
{ after(grammarAccess.getLongDegrRule()); } 
	 EOF 
;

// Rule LongDegr
ruleLongDegr
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getLongDegrAccess().getValueAssignment()); }
(rule__LongDegr__ValueAssignment)
{ after(grammarAccess.getLongDegrAccess().getValueAssignment()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleLatDegr
entryRuleLatDegr 
:
{ before(grammarAccess.getLatDegrRule()); }
	 ruleLatDegr
{ after(grammarAccess.getLatDegrRule()); } 
	 EOF 
;

// Rule LatDegr
ruleLatDegr
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getLatDegrAccess().getValueAssignment()); }
(rule__LatDegr__ValueAssignment)
{ after(grammarAccess.getLatDegrAccess().getValueAssignment()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleMinSec
entryRuleMinSec 
:
{ before(grammarAccess.getMinSecRule()); }
	 ruleMinSec
{ after(grammarAccess.getMinSecRule()); } 
	 EOF 
;

// Rule MinSec
ruleMinSec
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getMinSecAccess().getGroup()); }
(rule__MinSec__Group__0)
{ after(grammarAccess.getMinSecAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleSecDec
entryRuleSecDec 
:
{ before(grammarAccess.getSecDecRule()); }
	 ruleSecDec
{ after(grammarAccess.getSecDecRule()); } 
	 EOF 
;

// Rule SecDec
ruleSecDec
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getSecDecAccess().getGroup()); }
(rule__SecDec__Group__0)
{ after(grammarAccess.getSecDecAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleMinDec
entryRuleMinDec 
:
{ before(grammarAccess.getMinDecRule()); }
	 ruleMinDec
{ after(grammarAccess.getMinDecRule()); } 
	 EOF 
;

// Rule MinDec
ruleMinDec
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getMinDecAccess().getGroup()); }
(rule__MinDec__Group__0)
{ after(grammarAccess.getMinDecAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleLongDec
entryRuleLongDec 
:
{ before(grammarAccess.getLongDecRule()); }
	 ruleLongDec
{ after(grammarAccess.getLongDecRule()); } 
	 EOF 
;

// Rule LongDec
ruleLongDec
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getLongDecAccess().getValueAssignment()); }
(rule__LongDec__ValueAssignment)
{ after(grammarAccess.getLongDecAccess().getValueAssignment()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleLatDec
entryRuleLatDec 
:
{ before(grammarAccess.getLatDecRule()); }
	 ruleLatDec
{ after(grammarAccess.getLatDecRule()); } 
	 EOF 
;

// Rule LatDec
ruleLatDec
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getLatDecAccess().getValueAssignment()); }
(rule__LatDec__ValueAssignment)
{ after(grammarAccess.getLatDecAccess().getValueAssignment()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleDA
entryRuleDA 
:
{ before(grammarAccess.getDARule()); }
	 ruleDA
{ after(grammarAccess.getDARule()); } 
	 EOF 
;

// Rule DA
ruleDA
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getDAAccess().getGroup()); }
(rule__DA__Group__0)
{ after(grammarAccess.getDAAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleDaParams
entryRuleDaParams 
:
{ before(grammarAccess.getDaParamsRule()); }
	 ruleDaParams
{ after(grammarAccess.getDaParamsRule()); } 
	 EOF 
;

// Rule DaParams
ruleDaParams
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getDaParamsAccess().getAlternatives()); }
(rule__DaParams__Alternatives)
{ after(grammarAccess.getDaParamsAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleDaParams1
entryRuleDaParams1 
:
{ before(grammarAccess.getDaParams1Rule()); }
	 ruleDaParams1
{ after(grammarAccess.getDaParams1Rule()); } 
	 EOF 
;

// Rule DaParams1
ruleDaParams1
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getDaParams1Access().getGroup()); }
(rule__DaParams1__Group__0)
{ after(grammarAccess.getDaParams1Access().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleDaParams2
entryRuleDaParams2 
:
{ before(grammarAccess.getDaParams2Rule()); }
	 ruleDaParams2
{ after(grammarAccess.getDaParams2Rule()); } 
	 EOF 
;

// Rule DaParams2
ruleDaParams2
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getDaParams2Access().getGroup()); }
(rule__DaParams2__Group__0)
{ after(grammarAccess.getDaParams2Access().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleDB
entryRuleDB 
:
{ before(grammarAccess.getDBRule()); }
	 ruleDB
{ after(grammarAccess.getDBRule()); } 
	 EOF 
;

// Rule DB
ruleDB
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getDBAccess().getGroup()); }
(rule__DB__Group__0)
{ after(grammarAccess.getDBAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleAT
entryRuleAT 
:
{ before(grammarAccess.getATRule()); }
	 ruleAT
{ after(grammarAccess.getATRule()); } 
	 EOF 
;

// Rule AT
ruleAT
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getATAccess().getGroup()); }
(rule__AT__Group__0)
{ after(grammarAccess.getATAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}




// Rule ClassType
ruleClassType
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getClassTypeAccess().getAlternatives()); }
(rule__ClassType__Alternatives)
{ after(grammarAccess.getClassTypeAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Rule Units
ruleUnits
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getUnitsAccess().getAlternatives()); }
(rule__Units__Alternatives)
{ after(grammarAccess.getUnitsAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Rule WE
ruleWE
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getWEAccess().getAlternatives()); }
(rule__WE__Alternatives)
{ after(grammarAccess.getWEAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Rule NS
ruleNS
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNSAccess().getAlternatives()); }
(rule__NS__Alternatives)
{ after(grammarAccess.getNSAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



rule__Limites__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLimitesAccess().getLLimitParserRuleCall_0()); }
	ruleLLimit
{ after(grammarAccess.getLimitesAccess().getLLimitParserRuleCall_0()); }
)

    |(
{ before(grammarAccess.getLimitesAccess().getHLimitParserRuleCall_1()); }
	ruleHLimit
{ after(grammarAccess.getLimitesAccess().getHLimitParserRuleCall_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__TheGeom__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTheGeomAccess().getVParserRuleCall_0()); }
	ruleV
{ after(grammarAccess.getTheGeomAccess().getVParserRuleCall_0()); }
)

    |(
{ before(grammarAccess.getTheGeomAccess().getDPParserRuleCall_1()); }
	ruleDP
{ after(grammarAccess.getTheGeomAccess().getDPParserRuleCall_1()); }
)

    |(
{ before(grammarAccess.getTheGeomAccess().getDAParserRuleCall_2()); }
	ruleDA
{ after(grammarAccess.getTheGeomAccess().getDAParserRuleCall_2()); }
)

    |(
{ before(grammarAccess.getTheGeomAccess().getDBParserRuleCall_3()); }
	ruleDB
{ after(grammarAccess.getTheGeomAccess().getDBParserRuleCall_3()); }
)

    |(
{ before(grammarAccess.getTheGeomAccess().getDCParserRuleCall_4()); }
	ruleDC
{ after(grammarAccess.getTheGeomAccess().getDCParserRuleCall_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Limit__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLimitAccess().getFLParserRuleCall_0()); }
	ruleFL
{ after(grammarAccess.getLimitAccess().getFLParserRuleCall_0()); }
)

    |(
{ before(grammarAccess.getLimitAccess().getSFCParserRuleCall_1()); }
	ruleSFC
{ after(grammarAccess.getLimitAccess().getSFCParserRuleCall_1()); }
)

    |(
{ before(grammarAccess.getLimitAccess().getGNDParserRuleCall_2()); }
	ruleGND
{ after(grammarAccess.getLimitAccess().getGNDParserRuleCall_2()); }
)

    |(
{ before(grammarAccess.getLimitAccess().getUNLParserRuleCall_3()); }
	ruleUNL
{ after(grammarAccess.getLimitAccess().getUNLParserRuleCall_3()); }
)

    |(
{ before(grammarAccess.getLimitAccess().getVALParserRuleCall_4()); }
	ruleVAL
{ after(grammarAccess.getLimitAccess().getVALParserRuleCall_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Vsub__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVsubAccess().getGroup_0()); }
(rule__Vsub__Group_0__0)
{ after(grammarAccess.getVsubAccess().getGroup_0()); }
)

    |(
{ before(grammarAccess.getVsubAccess().getGroup_1()); }
(rule__Vsub__Group_1__0)
{ after(grammarAccess.getVsubAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__D__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDAccess().getPlusSignKeyword_0()); }

	'+' 

{ after(grammarAccess.getDAccess().getPlusSignKeyword_0()); }
)

    |(
{ before(grammarAccess.getDAccess().getHyphenMinusKeyword_1()); }

	'-' 

{ after(grammarAccess.getDAccess().getHyphenMinusKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Point__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPointAccess().getPoint1ParserRuleCall_0()); }
	rulePoint1
{ after(grammarAccess.getPointAccess().getPoint1ParserRuleCall_0()); }
)

    |(
{ before(grammarAccess.getPointAccess().getPoint2ParserRuleCall_1()); }
	rulePoint2
{ after(grammarAccess.getPointAccess().getPoint2ParserRuleCall_1()); }
)

    |(
{ before(grammarAccess.getPointAccess().getPoint3ParserRuleCall_2()); }
	rulePoint3
{ after(grammarAccess.getPointAccess().getPoint3ParserRuleCall_2()); }
)

    |(
{ before(grammarAccess.getPointAccess().getPoint4ParserRuleCall_3()); }
	rulePoint4
{ after(grammarAccess.getPointAccess().getPoint4ParserRuleCall_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__DaParams__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDaParamsAccess().getDaParams1ParserRuleCall_0()); }
	ruleDaParams1
{ after(grammarAccess.getDaParamsAccess().getDaParams1ParserRuleCall_0()); }
)

    |(
{ before(grammarAccess.getDaParamsAccess().getDaParams2ParserRuleCall_1()); }
	ruleDaParams2
{ after(grammarAccess.getDaParamsAccess().getDaParams2ParserRuleCall_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ClassType__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getClassTypeAccess().getAEnumLiteralDeclaration_0()); }
(	'A' 
)
{ after(grammarAccess.getClassTypeAccess().getAEnumLiteralDeclaration_0()); }
)

    |(
{ before(grammarAccess.getClassTypeAccess().getBEnumLiteralDeclaration_1()); }
(	'B' 
)
{ after(grammarAccess.getClassTypeAccess().getBEnumLiteralDeclaration_1()); }
)

    |(
{ before(grammarAccess.getClassTypeAccess().getCEnumLiteralDeclaration_2()); }
(	'C' 
)
{ after(grammarAccess.getClassTypeAccess().getCEnumLiteralDeclaration_2()); }
)

    |(
{ before(grammarAccess.getClassTypeAccess().getDEnumLiteralDeclaration_3()); }
(	'D' 
)
{ after(grammarAccess.getClassTypeAccess().getDEnumLiteralDeclaration_3()); }
)

    |(
{ before(grammarAccess.getClassTypeAccess().getEEnumLiteralDeclaration_4()); }
(	'E' 
)
{ after(grammarAccess.getClassTypeAccess().getEEnumLiteralDeclaration_4()); }
)

    |(
{ before(grammarAccess.getClassTypeAccess().getFEnumLiteralDeclaration_5()); }
(	'F' 
)
{ after(grammarAccess.getClassTypeAccess().getFEnumLiteralDeclaration_5()); }
)

    |(
{ before(grammarAccess.getClassTypeAccess().getGEnumLiteralDeclaration_6()); }
(	'G' 
)
{ after(grammarAccess.getClassTypeAccess().getGEnumLiteralDeclaration_6()); }
)

    |(
{ before(grammarAccess.getClassTypeAccess().getQEnumLiteralDeclaration_7()); }
(	'Q' 
)
{ after(grammarAccess.getClassTypeAccess().getQEnumLiteralDeclaration_7()); }
)

    |(
{ before(grammarAccess.getClassTypeAccess().getREnumLiteralDeclaration_8()); }
(	'R' 
)
{ after(grammarAccess.getClassTypeAccess().getREnumLiteralDeclaration_8()); }
)

    |(
{ before(grammarAccess.getClassTypeAccess().getWEnumLiteralDeclaration_9()); }
(	'W' 
)
{ after(grammarAccess.getClassTypeAccess().getWEnumLiteralDeclaration_9()); }
)

    |(
{ before(grammarAccess.getClassTypeAccess().getPEnumLiteralDeclaration_10()); }
(	'P' 
)
{ after(grammarAccess.getClassTypeAccess().getPEnumLiteralDeclaration_10()); }
)

    |(
{ before(grammarAccess.getClassTypeAccess().getGPEnumLiteralDeclaration_11()); }
(	'GP' 
)
{ after(grammarAccess.getClassTypeAccess().getGPEnumLiteralDeclaration_11()); }
)

    |(
{ before(grammarAccess.getClassTypeAccess().getTMZEnumLiteralDeclaration_12()); }
(	'TMZ' 
)
{ after(grammarAccess.getClassTypeAccess().getTMZEnumLiteralDeclaration_12()); }
)

    |(
{ before(grammarAccess.getClassTypeAccess().getCTREnumLiteralDeclaration_13()); }
(	'CTR' 
)
{ after(grammarAccess.getClassTypeAccess().getCTREnumLiteralDeclaration_13()); }
)

    |(
{ before(grammarAccess.getClassTypeAccess().getRestrictedEnumLiteralDeclaration_14()); }
(	'Restricted' 
)
{ after(grammarAccess.getClassTypeAccess().getRestrictedEnumLiteralDeclaration_14()); }
)

    |(
{ before(grammarAccess.getClassTypeAccess().getUKNEnumLiteralDeclaration_15()); }
(	'UKN' 
)
{ after(grammarAccess.getClassTypeAccess().getUKNEnumLiteralDeclaration_15()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Units__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getUnitsAccess().getFeedEnumLiteralDeclaration_0()); }
(	'ft' 
)
{ after(grammarAccess.getUnitsAccess().getFeedEnumLiteralDeclaration_0()); }
)

    |(
{ before(grammarAccess.getUnitsAccess().getMeterEnumLiteralDeclaration_1()); }
(	'm' 
)
{ after(grammarAccess.getUnitsAccess().getMeterEnumLiteralDeclaration_1()); }
)

    |(
{ before(grammarAccess.getUnitsAccess().getMslEnumLiteralDeclaration_2()); }
(	'MSL' 
)
{ after(grammarAccess.getUnitsAccess().getMslEnumLiteralDeclaration_2()); }
)

    |(
{ before(grammarAccess.getUnitsAccess().getM_mslEnumLiteralDeclaration_3()); }
(	'm MSL' 
)
{ after(grammarAccess.getUnitsAccess().getM_mslEnumLiteralDeclaration_3()); }
)

    |(
{ before(grammarAccess.getUnitsAccess().getFt_mslEnumLiteralDeclaration_4()); }
(	'ft MSL' 
)
{ after(grammarAccess.getUnitsAccess().getFt_mslEnumLiteralDeclaration_4()); }
)

    |(
{ before(grammarAccess.getUnitsAccess().getAglEnumLiteralDeclaration_5()); }
(	'AGL' 
)
{ after(grammarAccess.getUnitsAccess().getAglEnumLiteralDeclaration_5()); }
)

    |(
{ before(grammarAccess.getUnitsAccess().getM_aglEnumLiteralDeclaration_6()); }
(	'm AGL' 
)
{ after(grammarAccess.getUnitsAccess().getM_aglEnumLiteralDeclaration_6()); }
)

    |(
{ before(grammarAccess.getUnitsAccess().getFt_AGLEnumLiteralDeclaration_7()); }
(	'ft AGL' 
)
{ after(grammarAccess.getUnitsAccess().getFt_AGLEnumLiteralDeclaration_7()); }
)

    |(
{ before(grammarAccess.getUnitsAccess().getAMSLEnumLiteralDeclaration_8()); }
(	'AMSL' 
)
{ after(grammarAccess.getUnitsAccess().getAMSLEnumLiteralDeclaration_8()); }
)

    |(
{ before(grammarAccess.getUnitsAccess().getM_AMSLEnumLiteralDeclaration_9()); }
(	'm AMSL' 
)
{ after(grammarAccess.getUnitsAccess().getM_AMSLEnumLiteralDeclaration_9()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__WE__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getWEAccess().getWEnumLiteralDeclaration_0()); }
(	'W' 
)
{ after(grammarAccess.getWEAccess().getWEnumLiteralDeclaration_0()); }
)

    |(
{ before(grammarAccess.getWEAccess().getEEnumLiteralDeclaration_1()); }
(	'E' 
)
{ after(grammarAccess.getWEAccess().getEEnumLiteralDeclaration_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__NS__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNSAccess().getNEnumLiteralDeclaration_0()); }
(	'N' 
)
{ after(grammarAccess.getNSAccess().getNEnumLiteralDeclaration_0()); }
)

    |(
{ before(grammarAccess.getNSAccess().getSEnumLiteralDeclaration_1()); }
(	'S' 
)
{ after(grammarAccess.getNSAccess().getSEnumLiteralDeclaration_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}



rule__Airspace__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Airspace__Group__0__Impl
	rule__Airspace__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Airspace__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAirspaceAccess().getThedefAssignment_0()); }
(rule__Airspace__ThedefAssignment_0)
{ after(grammarAccess.getAirspaceAccess().getThedefAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Airspace__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Airspace__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Airspace__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAirspaceAccess().getThegeomAssignment_1()); }
(rule__Airspace__ThegeomAssignment_1)*
{ after(grammarAccess.getAirspaceAccess().getThegeomAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__TheDef__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__TheDef__Group__0__Impl
	rule__TheDef__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__TheDef__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTheDefAccess().getAsclassAssignment_0()); }
(rule__TheDef__AsclassAssignment_0)
{ after(grammarAccess.getTheDefAccess().getAsclassAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__TheDef__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__TheDef__Group__1__Impl
	rule__TheDef__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__TheDef__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTheDefAccess().getSpAssignment_1()); }
(rule__TheDef__SpAssignment_1)*
{ after(grammarAccess.getTheDefAccess().getSpAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__TheDef__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__TheDef__Group__2__Impl
	rule__TheDef__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__TheDef__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTheDefAccess().getSbAssignment_2()); }
(rule__TheDef__SbAssignment_2)*
{ after(grammarAccess.getTheDefAccess().getSbAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__TheDef__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__TheDef__Group__3__Impl
	rule__TheDef__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__TheDef__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTheDefAccess().getNameAssignment_3()); }
(rule__TheDef__NameAssignment_3)
{ after(grammarAccess.getTheDefAccess().getNameAssignment_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__TheDef__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__TheDef__Group__4__Impl
	rule__TheDef__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__TheDef__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTheDefAccess().getAtAssignment_4()); }
(rule__TheDef__AtAssignment_4)*
{ after(grammarAccess.getTheDefAccess().getAtAssignment_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__TheDef__Group__5
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__TheDef__Group__5__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__TheDef__Group__5__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTheDefAccess().getLimitAssignment_5()); }
(rule__TheDef__LimitAssignment_5)
{ after(grammarAccess.getTheDefAccess().getLimitAssignment_5()); }
)

;
finally {
	restoreStackSize(stackSize);
}














rule__AsClass__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AsClass__Group__0__Impl
	rule__AsClass__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__AsClass__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAsClassAccess().getAsClassAction_0()); }
(

)
{ after(grammarAccess.getAsClassAccess().getAsClassAction_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__AsClass__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AsClass__Group__1__Impl
	rule__AsClass__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__AsClass__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAsClassAccess().getACKeyword_1()); }

	'AC' 

{ after(grammarAccess.getAsClassAccess().getACKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__AsClass__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AsClass__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__AsClass__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAsClassAccess().getNameAssignment_2()); }
(rule__AsClass__NameAssignment_2)?
{ after(grammarAccess.getAsClassAccess().getNameAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__SP__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SP__Group__0__Impl
	rule__SP__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__SP__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSPAccess().getSPKeyword_0()); }

	'SP' 

{ after(grammarAccess.getSPAccess().getSPKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__SP__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SP__Group__1__Impl
	rule__SP__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__SP__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSPAccess().getSp0Assignment_1()); }
(rule__SP__Sp0Assignment_1)
{ after(grammarAccess.getSPAccess().getSp0Assignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__SP__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SP__Group__2__Impl
	rule__SP__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__SP__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSPAccess().getCommaKeyword_2()); }

	',' 

{ after(grammarAccess.getSPAccess().getCommaKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__SP__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SP__Group__3__Impl
	rule__SP__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__SP__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSPAccess().getSp1Assignment_3()); }
(rule__SP__Sp1Assignment_3)
{ after(grammarAccess.getSPAccess().getSp1Assignment_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__SP__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SP__Group__4__Impl
	rule__SP__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__SP__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSPAccess().getCommaKeyword_4()); }

	',' 

{ after(grammarAccess.getSPAccess().getCommaKeyword_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__SP__Group__5
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SP__Group__5__Impl
	rule__SP__Group__6
;
finally {
	restoreStackSize(stackSize);
}

rule__SP__Group__5__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSPAccess().getSp2Assignment_5()); }
(rule__SP__Sp2Assignment_5)
{ after(grammarAccess.getSPAccess().getSp2Assignment_5()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__SP__Group__6
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SP__Group__6__Impl
	rule__SP__Group__7
;
finally {
	restoreStackSize(stackSize);
}

rule__SP__Group__6__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSPAccess().getCommaKeyword_6()); }

	',' 

{ after(grammarAccess.getSPAccess().getCommaKeyword_6()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__SP__Group__7
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SP__Group__7__Impl
	rule__SP__Group__8
;
finally {
	restoreStackSize(stackSize);
}

rule__SP__Group__7__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSPAccess().getSp3Assignment_7()); }
(rule__SP__Sp3Assignment_7)
{ after(grammarAccess.getSPAccess().getSp3Assignment_7()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__SP__Group__8
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SP__Group__8__Impl
	rule__SP__Group__9
;
finally {
	restoreStackSize(stackSize);
}

rule__SP__Group__8__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSPAccess().getCommaKeyword_8()); }

	',' 

{ after(grammarAccess.getSPAccess().getCommaKeyword_8()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__SP__Group__9
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SP__Group__9__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__SP__Group__9__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSPAccess().getSp4Assignment_9()); }
(rule__SP__Sp4Assignment_9)
{ after(grammarAccess.getSPAccess().getSp4Assignment_9()); }
)

;
finally {
	restoreStackSize(stackSize);
}






















rule__SB__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SB__Group__0__Impl
	rule__SB__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__SB__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSBAccess().getSBKeyword_0()); }

	'SB' 

{ after(grammarAccess.getSBAccess().getSBKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__SB__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SB__Group__1__Impl
	rule__SB__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__SB__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSBAccess().getSbVal1Assignment_1()); }
(rule__SB__SbVal1Assignment_1)
{ after(grammarAccess.getSBAccess().getSbVal1Assignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__SB__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SB__Group__2__Impl
	rule__SB__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__SB__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSBAccess().getCommaKeyword_2()); }

	',' 

{ after(grammarAccess.getSBAccess().getCommaKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__SB__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SB__Group__3__Impl
	rule__SB__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__SB__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSBAccess().getSbVal2Assignment_3()); }
(rule__SB__SbVal2Assignment_3)
{ after(grammarAccess.getSBAccess().getSbVal2Assignment_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__SB__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SB__Group__4__Impl
	rule__SB__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__SB__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSBAccess().getCommaKeyword_4()); }

	',' 

{ after(grammarAccess.getSBAccess().getCommaKeyword_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__SB__Group__5
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SB__Group__5__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__SB__Group__5__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSBAccess().getSbVal3Assignment_5()); }
(rule__SB__SbVal3Assignment_5)
{ after(grammarAccess.getSBAccess().getSbVal3Assignment_5()); }
)

;
finally {
	restoreStackSize(stackSize);
}














rule__AsName__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AsName__Group__0__Impl
	rule__AsName__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__AsName__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAsNameAccess().getANKeyword_0()); }

	'AN' 

{ after(grammarAccess.getAsNameAccess().getANKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__AsName__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AsName__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__AsName__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAsNameAccess().getNameAssignment_1()); }
(rule__AsName__NameAssignment_1)
{ after(grammarAccess.getAsNameAccess().getNameAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__LLimit__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__LLimit__Group__0__Impl
	rule__LLimit__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__LLimit__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLLimitAccess().getLowLimitAssignment_0()); }
(rule__LLimit__LowLimitAssignment_0)
{ after(grammarAccess.getLLimitAccess().getLowLimitAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__LLimit__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__LLimit__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__LLimit__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLLimitAccess().getHighLimitAssignment_1()); }
(rule__LLimit__HighLimitAssignment_1)
{ after(grammarAccess.getLLimitAccess().getHighLimitAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__HLimit__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__HLimit__Group__0__Impl
	rule__HLimit__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__HLimit__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getHLimitAccess().getHeighLimitAssignment_0()); }
(rule__HLimit__HeighLimitAssignment_0)
{ after(grammarAccess.getHLimitAccess().getHeighLimitAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__HLimit__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__HLimit__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__HLimit__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getHLimitAccess().getLowLimitAssignment_1()); }
(rule__HLimit__LowLimitAssignment_1)
{ after(grammarAccess.getHLimitAccess().getLowLimitAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__LowLimit__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__LowLimit__Group__0__Impl
	rule__LowLimit__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__LowLimit__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLowLimitAccess().getALKeyword_0()); }

	'AL' 

{ after(grammarAccess.getLowLimitAccess().getALKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__LowLimit__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__LowLimit__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__LowLimit__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLowLimitAccess().getLlAssignment_1()); }
(rule__LowLimit__LlAssignment_1)
{ after(grammarAccess.getLowLimitAccess().getLlAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__HighLimit__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__HighLimit__Group__0__Impl
	rule__HighLimit__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__HighLimit__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getHighLimitAccess().getAHKeyword_0()); }

	'AH' 

{ after(grammarAccess.getHighLimitAccess().getAHKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__HighLimit__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__HighLimit__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__HighLimit__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getHighLimitAccess().getHlAssignment_1()); }
(rule__HighLimit__HlAssignment_1)
{ after(grammarAccess.getHighLimitAccess().getHlAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__FL__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FL__Group__0__Impl
	rule__FL__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__FL__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFLAccess().getFLKeyword_0()); }

	'FL' 

{ after(grammarAccess.getFLAccess().getFLKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__FL__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FL__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__FL__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFLAccess().getValueAssignment_1()); }
(rule__FL__ValueAssignment_1)
{ after(grammarAccess.getFLAccess().getValueAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__SFC__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SFC__Group__0__Impl
	rule__SFC__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__SFC__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSFCAccess().getSFCAction_0()); }
(

)
{ after(grammarAccess.getSFCAccess().getSFCAction_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__SFC__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SFC__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__SFC__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSFCAccess().getSFCKeyword_1()); }

	'SFC' 

{ after(grammarAccess.getSFCAccess().getSFCKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__GND__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__GND__Group__0__Impl
	rule__GND__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__GND__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getGNDAccess().getGNDAction_0()); }
(

)
{ after(grammarAccess.getGNDAccess().getGNDAction_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__GND__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__GND__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__GND__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getGNDAccess().getGNDKeyword_1()); }

	'GND' 

{ after(grammarAccess.getGNDAccess().getGNDKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__UNL__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__UNL__Group__0__Impl
	rule__UNL__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__UNL__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getUNLAccess().getUNLAction_0()); }
(

)
{ after(grammarAccess.getUNLAccess().getUNLAction_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__UNL__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__UNL__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__UNL__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getUNLAccess().getUNLKeyword_1()); }

	'UNL' 

{ after(grammarAccess.getUNLAccess().getUNLKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__VAL__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__VAL__Group__0__Impl
	rule__VAL__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__VAL__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVALAccess().getValueAssignment_0()); }
(rule__VAL__ValueAssignment_0)
{ after(grammarAccess.getVALAccess().getValueAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__VAL__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__VAL__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__VAL__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVALAccess().getUnitAssignment_1()); }
(rule__VAL__UnitAssignment_1)
{ after(grammarAccess.getVALAccess().getUnitAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__V__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__V__Group__0__Impl
	rule__V__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__V__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVAccess().getVKeyword_0()); }

	'V' 

{ after(grammarAccess.getVAccess().getVKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__V__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__V__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__V__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVAccess().getVsubAssignment_1()); }
(rule__V__VsubAssignment_1)
{ after(grammarAccess.getVAccess().getVsubAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Vsub__Group_0__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Vsub__Group_0__0__Impl
	rule__Vsub__Group_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Vsub__Group_0__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVsubAccess().getXKeyword_0_0()); }

	'X=' 

{ after(grammarAccess.getVsubAccess().getXKeyword_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Vsub__Group_0__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Vsub__Group_0__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Vsub__Group_0__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVsubAccess().getXAssignment_0_1()); }
(rule__Vsub__XAssignment_0_1)
{ after(grammarAccess.getVsubAccess().getXAssignment_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Vsub__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Vsub__Group_1__0__Impl
	rule__Vsub__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Vsub__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVsubAccess().getDKeyword_1_0()); }

	'D=' 

{ after(grammarAccess.getVsubAccess().getDKeyword_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Vsub__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Vsub__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Vsub__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVsubAccess().getDAssignment_1_1()); }
(rule__Vsub__DAssignment_1_1)
{ after(grammarAccess.getVsubAccess().getDAssignment_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__DC__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__DC__Group__0__Impl
	rule__DC__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__DC__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDCAccess().getDCKeyword_0()); }

	'DC' 

{ after(grammarAccess.getDCAccess().getDCKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__DC__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__DC__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__DC__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDCAccess().getRadiusAssignment_1()); }
(rule__DC__RadiusAssignment_1)
{ after(grammarAccess.getDCAccess().getRadiusAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__DP__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__DP__Group__0__Impl
	rule__DP__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__DP__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDPAccess().getDPKeyword_0()); }

	'DP' 

{ after(grammarAccess.getDPAccess().getDPKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__DP__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__DP__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__DP__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDPAccess().getDpAssignment_1()); }
(rule__DP__DpAssignment_1)
{ after(grammarAccess.getDPAccess().getDpAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Point1__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Point1__Group__0__Impl
	rule__Point1__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Point1__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPoint1Access().getLongDAssignment_0()); }
(rule__Point1__LongDAssignment_0)
{ after(grammarAccess.getPoint1Access().getLongDAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Point1__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Point1__Group__1__Impl
	rule__Point1__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Point1__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPoint1Access().getLongMAssignment_1()); }
(rule__Point1__LongMAssignment_1)
{ after(grammarAccess.getPoint1Access().getLongMAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Point1__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Point1__Group__2__Impl
	rule__Point1__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Point1__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPoint1Access().getLongSAssignment_2()); }
(rule__Point1__LongSAssignment_2)
{ after(grammarAccess.getPoint1Access().getLongSAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Point1__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Point1__Group__3__Impl
	rule__Point1__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Point1__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPoint1Access().getNsAssignment_3()); }
(rule__Point1__NsAssignment_3)
{ after(grammarAccess.getPoint1Access().getNsAssignment_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Point1__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Point1__Group__4__Impl
	rule__Point1__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__Point1__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPoint1Access().getLatDAssignment_4()); }
(rule__Point1__LatDAssignment_4)
{ after(grammarAccess.getPoint1Access().getLatDAssignment_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Point1__Group__5
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Point1__Group__5__Impl
	rule__Point1__Group__6
;
finally {
	restoreStackSize(stackSize);
}

rule__Point1__Group__5__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPoint1Access().getLatMAssignment_5()); }
(rule__Point1__LatMAssignment_5)
{ after(grammarAccess.getPoint1Access().getLatMAssignment_5()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Point1__Group__6
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Point1__Group__6__Impl
	rule__Point1__Group__7
;
finally {
	restoreStackSize(stackSize);
}

rule__Point1__Group__6__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPoint1Access().getLatSAssignment_6()); }
(rule__Point1__LatSAssignment_6)
{ after(grammarAccess.getPoint1Access().getLatSAssignment_6()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Point1__Group__7
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Point1__Group__7__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Point1__Group__7__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPoint1Access().getWeAssignment_7()); }
(rule__Point1__WeAssignment_7)
{ after(grammarAccess.getPoint1Access().getWeAssignment_7()); }
)

;
finally {
	restoreStackSize(stackSize);
}


















rule__Point2__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Point2__Group__0__Impl
	rule__Point2__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Point2__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPoint2Access().getLongDAssignment_0()); }
(rule__Point2__LongDAssignment_0)
{ after(grammarAccess.getPoint2Access().getLongDAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Point2__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Point2__Group__1__Impl
	rule__Point2__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Point2__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPoint2Access().getLongMfAssignment_1()); }
(rule__Point2__LongMfAssignment_1)
{ after(grammarAccess.getPoint2Access().getLongMfAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Point2__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Point2__Group__2__Impl
	rule__Point2__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Point2__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPoint2Access().getNsAssignment_2()); }
(rule__Point2__NsAssignment_2)
{ after(grammarAccess.getPoint2Access().getNsAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Point2__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Point2__Group__3__Impl
	rule__Point2__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Point2__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPoint2Access().getLatDAssignment_3()); }
(rule__Point2__LatDAssignment_3)
{ after(grammarAccess.getPoint2Access().getLatDAssignment_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Point2__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Point2__Group__4__Impl
	rule__Point2__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__Point2__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPoint2Access().getLatMfAssignment_4()); }
(rule__Point2__LatMfAssignment_4)
{ after(grammarAccess.getPoint2Access().getLatMfAssignment_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Point2__Group__5
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Point2__Group__5__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Point2__Group__5__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPoint2Access().getWeAssignment_5()); }
(rule__Point2__WeAssignment_5)
{ after(grammarAccess.getPoint2Access().getWeAssignment_5()); }
)

;
finally {
	restoreStackSize(stackSize);
}














rule__Point3__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Point3__Group__0__Impl
	rule__Point3__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Point3__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPoint3Access().getLongDAssignment_0()); }
(rule__Point3__LongDAssignment_0)
{ after(grammarAccess.getPoint3Access().getLongDAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Point3__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Point3__Group__1__Impl
	rule__Point3__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Point3__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPoint3Access().getLongMAssignment_1()); }
(rule__Point3__LongMAssignment_1)
{ after(grammarAccess.getPoint3Access().getLongMAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Point3__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Point3__Group__2__Impl
	rule__Point3__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Point3__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPoint3Access().getLongSAssignment_2()); }
(rule__Point3__LongSAssignment_2)
{ after(grammarAccess.getPoint3Access().getLongSAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Point3__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Point3__Group__3__Impl
	rule__Point3__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Point3__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPoint3Access().getNsAssignment_3()); }
(rule__Point3__NsAssignment_3)
{ after(grammarAccess.getPoint3Access().getNsAssignment_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Point3__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Point3__Group__4__Impl
	rule__Point3__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__Point3__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPoint3Access().getLatDAssignment_4()); }
(rule__Point3__LatDAssignment_4)
{ after(grammarAccess.getPoint3Access().getLatDAssignment_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Point3__Group__5
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Point3__Group__5__Impl
	rule__Point3__Group__6
;
finally {
	restoreStackSize(stackSize);
}

rule__Point3__Group__5__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPoint3Access().getLatMAssignment_5()); }
(rule__Point3__LatMAssignment_5)
{ after(grammarAccess.getPoint3Access().getLatMAssignment_5()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Point3__Group__6
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Point3__Group__6__Impl
	rule__Point3__Group__7
;
finally {
	restoreStackSize(stackSize);
}

rule__Point3__Group__6__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPoint3Access().getLatSAssignment_6()); }
(rule__Point3__LatSAssignment_6)
{ after(grammarAccess.getPoint3Access().getLatSAssignment_6()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Point3__Group__7
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Point3__Group__7__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Point3__Group__7__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPoint3Access().getWeAssignment_7()); }
(rule__Point3__WeAssignment_7)
{ after(grammarAccess.getPoint3Access().getWeAssignment_7()); }
)

;
finally {
	restoreStackSize(stackSize);
}


















rule__Point4__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Point4__Group__0__Impl
	rule__Point4__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Point4__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPoint4Access().getLongDAssignment_0()); }
(rule__Point4__LongDAssignment_0)
{ after(grammarAccess.getPoint4Access().getLongDAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Point4__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Point4__Group__1__Impl
	rule__Point4__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Point4__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPoint4Access().getNsAssignment_1()); }
(rule__Point4__NsAssignment_1)
{ after(grammarAccess.getPoint4Access().getNsAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Point4__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Point4__Group__2__Impl
	rule__Point4__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Point4__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPoint4Access().getLatDAssignment_2()); }
(rule__Point4__LatDAssignment_2)
{ after(grammarAccess.getPoint4Access().getLatDAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Point4__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Point4__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Point4__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPoint4Access().getWeAssignment_3()); }
(rule__Point4__WeAssignment_3)
{ after(grammarAccess.getPoint4Access().getWeAssignment_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}










rule__MinSec__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__MinSec__Group__0__Impl
	rule__MinSec__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__MinSec__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMinSecAccess().getColonKeyword_0()); }

	':' 

{ after(grammarAccess.getMinSecAccess().getColonKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__MinSec__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__MinSec__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__MinSec__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMinSecAccess().getValueAssignment_1()); }
(rule__MinSec__ValueAssignment_1)
{ after(grammarAccess.getMinSecAccess().getValueAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__SecDec__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SecDec__Group__0__Impl
	rule__SecDec__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__SecDec__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSecDecAccess().getColonKeyword_0()); }

	':' 

{ after(grammarAccess.getSecDecAccess().getColonKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__SecDec__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SecDec__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__SecDec__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSecDecAccess().getValueAssignment_1()); }
(rule__SecDec__ValueAssignment_1)
{ after(grammarAccess.getSecDecAccess().getValueAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__MinDec__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__MinDec__Group__0__Impl
	rule__MinDec__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__MinDec__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMinDecAccess().getColonKeyword_0()); }

	':' 

{ after(grammarAccess.getMinDecAccess().getColonKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__MinDec__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__MinDec__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__MinDec__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMinDecAccess().getValueAssignment_1()); }
(rule__MinDec__ValueAssignment_1)
{ after(grammarAccess.getMinDecAccess().getValueAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__DA__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__DA__Group__0__Impl
	rule__DA__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__DA__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDAAccess().getDAKeyword_0()); }

	'DA' 

{ after(grammarAccess.getDAAccess().getDAKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__DA__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__DA__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__DA__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDAAccess().getDaAssignment_1()); }
(rule__DA__DaAssignment_1)
{ after(grammarAccess.getDAAccess().getDaAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__DaParams1__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__DaParams1__Group__0__Impl
	rule__DaParams1__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__DaParams1__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDaParams1Access().getRadiusAssignment_0()); }
(rule__DaParams1__RadiusAssignment_0)
{ after(grammarAccess.getDaParams1Access().getRadiusAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__DaParams1__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__DaParams1__Group__1__Impl
	rule__DaParams1__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__DaParams1__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDaParams1Access().getCommaKeyword_1()); }

	',' 

{ after(grammarAccess.getDaParams1Access().getCommaKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__DaParams1__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__DaParams1__Group__2__Impl
	rule__DaParams1__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__DaParams1__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDaParams1Access().getAngleStartAssignment_2()); }
(rule__DaParams1__AngleStartAssignment_2)
{ after(grammarAccess.getDaParams1Access().getAngleStartAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__DaParams1__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__DaParams1__Group__3__Impl
	rule__DaParams1__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__DaParams1__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDaParams1Access().getCommaKeyword_3()); }

	',' 

{ after(grammarAccess.getDaParams1Access().getCommaKeyword_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__DaParams1__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__DaParams1__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__DaParams1__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDaParams1Access().getAngleEndAssignment_4()); }
(rule__DaParams1__AngleEndAssignment_4)
{ after(grammarAccess.getDaParams1Access().getAngleEndAssignment_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}












rule__DaParams2__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__DaParams2__Group__0__Impl
	rule__DaParams2__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__DaParams2__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDaParams2Access().getRadiusAssignment_0()); }
(rule__DaParams2__RadiusAssignment_0)
{ after(grammarAccess.getDaParams2Access().getRadiusAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__DaParams2__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__DaParams2__Group__1__Impl
	rule__DaParams2__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__DaParams2__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDaParams2Access().getCommaKeyword_1()); }

	',' 

{ after(grammarAccess.getDaParams2Access().getCommaKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__DaParams2__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__DaParams2__Group__2__Impl
	rule__DaParams2__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__DaParams2__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDaParams2Access().getAngleStartAssignment_2()); }
(rule__DaParams2__AngleStartAssignment_2)
{ after(grammarAccess.getDaParams2Access().getAngleStartAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__DaParams2__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__DaParams2__Group__3__Impl
	rule__DaParams2__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__DaParams2__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDaParams2Access().getCommaKeyword_3()); }

	',' 

{ after(grammarAccess.getDaParams2Access().getCommaKeyword_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__DaParams2__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__DaParams2__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__DaParams2__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDaParams2Access().getAngleEndAssignment_4()); }
(rule__DaParams2__AngleEndAssignment_4)
{ after(grammarAccess.getDaParams2Access().getAngleEndAssignment_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}












rule__DB__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__DB__Group__0__Impl
	rule__DB__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__DB__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDBAccess().getDBKeyword_0()); }

	'DB' 

{ after(grammarAccess.getDBAccess().getDBKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__DB__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__DB__Group__1__Impl
	rule__DB__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__DB__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDBAccess().getDp0Assignment_1()); }
(rule__DB__Dp0Assignment_1)
{ after(grammarAccess.getDBAccess().getDp0Assignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__DB__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__DB__Group__2__Impl
	rule__DB__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__DB__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDBAccess().getCommaKeyword_2()); }
(
	',' 
)?
{ after(grammarAccess.getDBAccess().getCommaKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__DB__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__DB__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__DB__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDBAccess().getDp1Assignment_3()); }
(rule__DB__Dp1Assignment_3)
{ after(grammarAccess.getDBAccess().getDp1Assignment_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}










rule__AT__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AT__Group__0__Impl
	rule__AT__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__AT__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getATAccess().getATKeyword_0()); }

	'AT' 

{ after(grammarAccess.getATAccess().getATKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__AT__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AT__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__AT__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getATAccess().getLpAssignment_1()); }
(rule__AT__LpAssignment_1)
{ after(grammarAccess.getATAccess().getLpAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}







rule__OpenAir__AirspacesAssignment
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOpenAirAccess().getAirspacesAirspaceParserRuleCall_0()); }
	ruleAirspace{ after(grammarAccess.getOpenAirAccess().getAirspacesAirspaceParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Airspace__ThedefAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAirspaceAccess().getThedefTheDefParserRuleCall_0_0()); }
	ruleTheDef{ after(grammarAccess.getAirspaceAccess().getThedefTheDefParserRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Airspace__ThegeomAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAirspaceAccess().getThegeomTheGeomParserRuleCall_1_0()); }
	ruleTheGeom{ after(grammarAccess.getAirspaceAccess().getThegeomTheGeomParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__TheDef__AsclassAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTheDefAccess().getAsclassAsClassParserRuleCall_0_0()); }
	ruleAsClass{ after(grammarAccess.getTheDefAccess().getAsclassAsClassParserRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__TheDef__SpAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTheDefAccess().getSpSPParserRuleCall_1_0()); }
	ruleSP{ after(grammarAccess.getTheDefAccess().getSpSPParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__TheDef__SbAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTheDefAccess().getSbSBParserRuleCall_2_0()); }
	ruleSB{ after(grammarAccess.getTheDefAccess().getSbSBParserRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__TheDef__NameAssignment_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTheDefAccess().getNameAsNameParserRuleCall_3_0()); }
	ruleAsName{ after(grammarAccess.getTheDefAccess().getNameAsNameParserRuleCall_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__TheDef__AtAssignment_4
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTheDefAccess().getAtATParserRuleCall_4_0()); }
	ruleAT{ after(grammarAccess.getTheDefAccess().getAtATParserRuleCall_4_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__TheDef__LimitAssignment_5
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTheDefAccess().getLimitLimitesParserRuleCall_5_0()); }
	ruleLimites{ after(grammarAccess.getTheDefAccess().getLimitLimitesParserRuleCall_5_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__AsClass__NameAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAsClassAccess().getNameClassTypeEnumRuleCall_2_0()); }
	ruleClassType{ after(grammarAccess.getAsClassAccess().getNameClassTypeEnumRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__SP__Sp0Assignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSPAccess().getSp0INTTerminalRuleCall_1_0()); }
	RULE_INT{ after(grammarAccess.getSPAccess().getSp0INTTerminalRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__SP__Sp1Assignment_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSPAccess().getSp1INTTerminalRuleCall_3_0()); }
	RULE_INT{ after(grammarAccess.getSPAccess().getSp1INTTerminalRuleCall_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__SP__Sp2Assignment_5
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSPAccess().getSp2INTTerminalRuleCall_5_0()); }
	RULE_INT{ after(grammarAccess.getSPAccess().getSp2INTTerminalRuleCall_5_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__SP__Sp3Assignment_7
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSPAccess().getSp3INTTerminalRuleCall_7_0()); }
	RULE_INT{ after(grammarAccess.getSPAccess().getSp3INTTerminalRuleCall_7_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__SP__Sp4Assignment_9
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSPAccess().getSp4INTTerminalRuleCall_9_0()); }
	RULE_INT{ after(grammarAccess.getSPAccess().getSp4INTTerminalRuleCall_9_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__SB__SbVal1Assignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSBAccess().getSbVal1INTTerminalRuleCall_1_0()); }
	RULE_INT{ after(grammarAccess.getSBAccess().getSbVal1INTTerminalRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__SB__SbVal2Assignment_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSBAccess().getSbVal2INTTerminalRuleCall_3_0()); }
	RULE_INT{ after(grammarAccess.getSBAccess().getSbVal2INTTerminalRuleCall_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__SB__SbVal3Assignment_5
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSBAccess().getSbVal3INTTerminalRuleCall_5_0()); }
	RULE_INT{ after(grammarAccess.getSBAccess().getSbVal3INTTerminalRuleCall_5_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__AsName__NameAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAsNameAccess().getNameSTRINGTerminalRuleCall_1_0()); }
	RULE_STRING{ after(grammarAccess.getAsNameAccess().getNameSTRINGTerminalRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__LLimit__LowLimitAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLLimitAccess().getLowLimitLowLimitParserRuleCall_0_0()); }
	ruleLowLimit{ after(grammarAccess.getLLimitAccess().getLowLimitLowLimitParserRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__LLimit__HighLimitAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLLimitAccess().getHighLimitHighLimitParserRuleCall_1_0()); }
	ruleHighLimit{ after(grammarAccess.getLLimitAccess().getHighLimitHighLimitParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__HLimit__HeighLimitAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getHLimitAccess().getHeighLimitHighLimitParserRuleCall_0_0()); }
	ruleHighLimit{ after(grammarAccess.getHLimitAccess().getHeighLimitHighLimitParserRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__HLimit__LowLimitAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getHLimitAccess().getLowLimitLowLimitParserRuleCall_1_0()); }
	ruleLowLimit{ after(grammarAccess.getHLimitAccess().getLowLimitLowLimitParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__LowLimit__LlAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLowLimitAccess().getLlLimitParserRuleCall_1_0()); }
	ruleLimit{ after(grammarAccess.getLowLimitAccess().getLlLimitParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__HighLimit__HlAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getHighLimitAccess().getHlLimitParserRuleCall_1_0()); }
	ruleLimit{ after(grammarAccess.getHighLimitAccess().getHlLimitParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__FL__ValueAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFLAccess().getValueINTTerminalRuleCall_1_0()); }
	RULE_INT{ after(grammarAccess.getFLAccess().getValueINTTerminalRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__VAL__ValueAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVALAccess().getValueINTTerminalRuleCall_0_0()); }
	RULE_INT{ after(grammarAccess.getVALAccess().getValueINTTerminalRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__VAL__UnitAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVALAccess().getUnitUnitsEnumRuleCall_1_0()); }
	ruleUnits{ after(grammarAccess.getVALAccess().getUnitUnitsEnumRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__V__VsubAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVAccess().getVsubVsubParserRuleCall_1_0()); }
	ruleVsub{ after(grammarAccess.getVAccess().getVsubVsubParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Vsub__XAssignment_0_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVsubAccess().getXPointParserRuleCall_0_1_0()); }
	rulePoint{ after(grammarAccess.getVsubAccess().getXPointParserRuleCall_0_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Vsub__DAssignment_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVsubAccess().getDDParserRuleCall_1_1_0()); }
	ruleD{ after(grammarAccess.getVsubAccess().getDDParserRuleCall_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__DC__RadiusAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDCAccess().getRadiusREALTerminalRuleCall_1_0()); }
	RULE_REAL{ after(grammarAccess.getDCAccess().getRadiusREALTerminalRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__DP__DpAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDPAccess().getDpPointParserRuleCall_1_0()); }
	rulePoint{ after(grammarAccess.getDPAccess().getDpPointParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Point1__LongDAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPoint1Access().getLongDLongDegrParserRuleCall_0_0()); }
	ruleLongDegr{ after(grammarAccess.getPoint1Access().getLongDLongDegrParserRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Point1__LongMAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPoint1Access().getLongMMinSecParserRuleCall_1_0()); }
	ruleMinSec{ after(grammarAccess.getPoint1Access().getLongMMinSecParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Point1__LongSAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPoint1Access().getLongSMinSecParserRuleCall_2_0()); }
	ruleMinSec{ after(grammarAccess.getPoint1Access().getLongSMinSecParserRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Point1__NsAssignment_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPoint1Access().getNsNSEnumRuleCall_3_0()); }
	ruleNS{ after(grammarAccess.getPoint1Access().getNsNSEnumRuleCall_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Point1__LatDAssignment_4
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPoint1Access().getLatDLatDegrParserRuleCall_4_0()); }
	ruleLatDegr{ after(grammarAccess.getPoint1Access().getLatDLatDegrParserRuleCall_4_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Point1__LatMAssignment_5
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPoint1Access().getLatMMinSecParserRuleCall_5_0()); }
	ruleMinSec{ after(grammarAccess.getPoint1Access().getLatMMinSecParserRuleCall_5_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Point1__LatSAssignment_6
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPoint1Access().getLatSMinSecParserRuleCall_6_0()); }
	ruleMinSec{ after(grammarAccess.getPoint1Access().getLatSMinSecParserRuleCall_6_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Point1__WeAssignment_7
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPoint1Access().getWeWEEnumRuleCall_7_0()); }
	ruleWE{ after(grammarAccess.getPoint1Access().getWeWEEnumRuleCall_7_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Point2__LongDAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPoint2Access().getLongDLongDegrParserRuleCall_0_0()); }
	ruleLongDegr{ after(grammarAccess.getPoint2Access().getLongDLongDegrParserRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Point2__LongMfAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPoint2Access().getLongMfMinDecParserRuleCall_1_0()); }
	ruleMinDec{ after(grammarAccess.getPoint2Access().getLongMfMinDecParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Point2__NsAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPoint2Access().getNsNSEnumRuleCall_2_0()); }
	ruleNS{ after(grammarAccess.getPoint2Access().getNsNSEnumRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Point2__LatDAssignment_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPoint2Access().getLatDLatDegrParserRuleCall_3_0()); }
	ruleLatDegr{ after(grammarAccess.getPoint2Access().getLatDLatDegrParserRuleCall_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Point2__LatMfAssignment_4
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPoint2Access().getLatMfMinDecParserRuleCall_4_0()); }
	ruleMinDec{ after(grammarAccess.getPoint2Access().getLatMfMinDecParserRuleCall_4_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Point2__WeAssignment_5
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPoint2Access().getWeWEEnumRuleCall_5_0()); }
	ruleWE{ after(grammarAccess.getPoint2Access().getWeWEEnumRuleCall_5_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Point3__LongDAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPoint3Access().getLongDLongDegrParserRuleCall_0_0()); }
	ruleLongDegr{ after(grammarAccess.getPoint3Access().getLongDLongDegrParserRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Point3__LongMAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPoint3Access().getLongMMinSecParserRuleCall_1_0()); }
	ruleMinSec{ after(grammarAccess.getPoint3Access().getLongMMinSecParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Point3__LongSAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPoint3Access().getLongSSecDecParserRuleCall_2_0()); }
	ruleSecDec{ after(grammarAccess.getPoint3Access().getLongSSecDecParserRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Point3__NsAssignment_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPoint3Access().getNsNSEnumRuleCall_3_0()); }
	ruleNS{ after(grammarAccess.getPoint3Access().getNsNSEnumRuleCall_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Point3__LatDAssignment_4
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPoint3Access().getLatDLatDegrParserRuleCall_4_0()); }
	ruleLatDegr{ after(grammarAccess.getPoint3Access().getLatDLatDegrParserRuleCall_4_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Point3__LatMAssignment_5
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPoint3Access().getLatMMinSecParserRuleCall_5_0()); }
	ruleMinSec{ after(grammarAccess.getPoint3Access().getLatMMinSecParserRuleCall_5_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Point3__LatSAssignment_6
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPoint3Access().getLatSSecDecParserRuleCall_6_0()); }
	ruleSecDec{ after(grammarAccess.getPoint3Access().getLatSSecDecParserRuleCall_6_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Point3__WeAssignment_7
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPoint3Access().getWeWEEnumRuleCall_7_0()); }
	ruleWE{ after(grammarAccess.getPoint3Access().getWeWEEnumRuleCall_7_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Point4__LongDAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPoint4Access().getLongDLongDecParserRuleCall_0_0()); }
	ruleLongDec{ after(grammarAccess.getPoint4Access().getLongDLongDecParserRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Point4__NsAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPoint4Access().getNsNSEnumRuleCall_1_0()); }
	ruleNS{ after(grammarAccess.getPoint4Access().getNsNSEnumRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Point4__LatDAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPoint4Access().getLatDLatDecParserRuleCall_2_0()); }
	ruleLatDec{ after(grammarAccess.getPoint4Access().getLatDLatDecParserRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Point4__WeAssignment_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPoint4Access().getWeWEEnumRuleCall_3_0()); }
	ruleWE{ after(grammarAccess.getPoint4Access().getWeWEEnumRuleCall_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__LongDegr__ValueAssignment
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLongDegrAccess().getValueINTTerminalRuleCall_0()); }
	RULE_INT{ after(grammarAccess.getLongDegrAccess().getValueINTTerminalRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__LatDegr__ValueAssignment
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLatDegrAccess().getValueINTTerminalRuleCall_0()); }
	RULE_INT{ after(grammarAccess.getLatDegrAccess().getValueINTTerminalRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__MinSec__ValueAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMinSecAccess().getValueINTTerminalRuleCall_1_0()); }
	RULE_INT{ after(grammarAccess.getMinSecAccess().getValueINTTerminalRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__SecDec__ValueAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSecDecAccess().getValueREALTerminalRuleCall_1_0()); }
	RULE_REAL{ after(grammarAccess.getSecDecAccess().getValueREALTerminalRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__MinDec__ValueAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMinDecAccess().getValueREALTerminalRuleCall_1_0()); }
	RULE_REAL{ after(grammarAccess.getMinDecAccess().getValueREALTerminalRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__LongDec__ValueAssignment
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLongDecAccess().getValueREALTerminalRuleCall_0()); }
	RULE_REAL{ after(grammarAccess.getLongDecAccess().getValueREALTerminalRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__LatDec__ValueAssignment
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLatDecAccess().getValueREALTerminalRuleCall_0()); }
	RULE_REAL{ after(grammarAccess.getLatDecAccess().getValueREALTerminalRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__DA__DaAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDAAccess().getDaDaParamsParserRuleCall_1_0()); }
	ruleDaParams{ after(grammarAccess.getDAAccess().getDaDaParamsParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__DaParams1__RadiusAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDaParams1Access().getRadiusREALTerminalRuleCall_0_0()); }
	RULE_REAL{ after(grammarAccess.getDaParams1Access().getRadiusREALTerminalRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__DaParams1__AngleStartAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDaParams1Access().getAngleStartINTTerminalRuleCall_2_0()); }
	RULE_INT{ after(grammarAccess.getDaParams1Access().getAngleStartINTTerminalRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__DaParams1__AngleEndAssignment_4
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDaParams1Access().getAngleEndINTTerminalRuleCall_4_0()); }
	RULE_INT{ after(grammarAccess.getDaParams1Access().getAngleEndINTTerminalRuleCall_4_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__DaParams2__RadiusAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDaParams2Access().getRadiusINTTerminalRuleCall_0_0()); }
	RULE_INT{ after(grammarAccess.getDaParams2Access().getRadiusINTTerminalRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__DaParams2__AngleStartAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDaParams2Access().getAngleStartINTTerminalRuleCall_2_0()); }
	RULE_INT{ after(grammarAccess.getDaParams2Access().getAngleStartINTTerminalRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__DaParams2__AngleEndAssignment_4
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDaParams2Access().getAngleEndINTTerminalRuleCall_4_0()); }
	RULE_INT{ after(grammarAccess.getDaParams2Access().getAngleEndINTTerminalRuleCall_4_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__DB__Dp0Assignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDBAccess().getDp0PointParserRuleCall_1_0()); }
	rulePoint{ after(grammarAccess.getDBAccess().getDp0PointParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__DB__Dp1Assignment_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDBAccess().getDp1PointParserRuleCall_3_0()); }
	rulePoint{ after(grammarAccess.getDBAccess().getDp1PointParserRuleCall_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__AT__LpAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getATAccess().getLpPointParserRuleCall_1_0()); }
	rulePoint{ after(grammarAccess.getATAccess().getLpPointParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


RULE_REAL : '-'? RULE_INT+ '.' RULE_INT+;

RULE_SL_COMMENT : '*' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' ('b'|'t'|'n'|'f'|'r'|'"'|'\''|'\\')|~(('\\'|'"')))* '"'|'\'' ('\\' ('b'|'t'|'n'|'f'|'r'|'"'|'\''|'\\')|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;


