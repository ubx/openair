/*
* generated by Xtext
*/

package www.ubx.ch.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;

import org.eclipse.xtext.common.services.TerminalsGrammarAccess;

@Singleton
public class OpenAirGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class OpenAirElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "OpenAir");
		private final Assignment cAirspacesAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cAirspacesAirspaceParserRuleCall_0 = (RuleCall)cAirspacesAssignment.eContents().get(0);
		
		//OpenAir:
		//	airspaces+=Airspace*;
		public ParserRule getRule() { return rule; }

		//airspaces+=Airspace*
		public Assignment getAirspacesAssignment() { return cAirspacesAssignment; }

		//Airspace
		public RuleCall getAirspacesAirspaceParserRuleCall_0() { return cAirspacesAirspaceParserRuleCall_0; }
	}

	public class AirspaceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Airspace");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cThedefAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cThedefTheDefParserRuleCall_0_0 = (RuleCall)cThedefAssignment_0.eContents().get(0);
		private final Assignment cThegeomAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cThegeomTheGeomParserRuleCall_1_0 = (RuleCall)cThegeomAssignment_1.eContents().get(0);
		
		//Airspace:
		//	thedef=TheDef thegeom+=TheGeom*;
		public ParserRule getRule() { return rule; }

		//thedef=TheDef thegeom+=TheGeom*
		public Group getGroup() { return cGroup; }

		//thedef=TheDef
		public Assignment getThedefAssignment_0() { return cThedefAssignment_0; }

		//TheDef
		public RuleCall getThedefTheDefParserRuleCall_0_0() { return cThedefTheDefParserRuleCall_0_0; }

		//thegeom+=TheGeom*
		public Assignment getThegeomAssignment_1() { return cThegeomAssignment_1; }

		//TheGeom
		public RuleCall getThegeomTheGeomParserRuleCall_1_0() { return cThegeomTheGeomParserRuleCall_1_0; }
	}

	public class TheDefElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "TheDef");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cAsclassAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cAsclassAsClassParserRuleCall_0_0 = (RuleCall)cAsclassAssignment_0.eContents().get(0);
		private final Assignment cSpAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cSpSPParserRuleCall_1_0 = (RuleCall)cSpAssignment_1.eContents().get(0);
		private final Assignment cSbAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cSbSBParserRuleCall_2_0 = (RuleCall)cSbAssignment_2.eContents().get(0);
		private final Assignment cNameAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cNameAsNameParserRuleCall_3_0 = (RuleCall)cNameAssignment_3.eContents().get(0);
		private final Assignment cAtAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cAtATParserRuleCall_4_0 = (RuleCall)cAtAssignment_4.eContents().get(0);
		private final Assignment cLimitAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cLimitLimitesParserRuleCall_5_0 = (RuleCall)cLimitAssignment_5.eContents().get(0);
		
		//TheDef:
		//	asclass=AsClass sp+=SP* sb+=SB* name=AsName at+=AT* limit=Limites;
		public ParserRule getRule() { return rule; }

		//asclass=AsClass sp+=SP* sb+=SB* name=AsName at+=AT* limit=Limites
		public Group getGroup() { return cGroup; }

		//asclass=AsClass
		public Assignment getAsclassAssignment_0() { return cAsclassAssignment_0; }

		//AsClass
		public RuleCall getAsclassAsClassParserRuleCall_0_0() { return cAsclassAsClassParserRuleCall_0_0; }

		//sp+=SP*
		public Assignment getSpAssignment_1() { return cSpAssignment_1; }

		//SP
		public RuleCall getSpSPParserRuleCall_1_0() { return cSpSPParserRuleCall_1_0; }

		//sb+=SB*
		public Assignment getSbAssignment_2() { return cSbAssignment_2; }

		//SB
		public RuleCall getSbSBParserRuleCall_2_0() { return cSbSBParserRuleCall_2_0; }

		//name=AsName
		public Assignment getNameAssignment_3() { return cNameAssignment_3; }

		//AsName
		public RuleCall getNameAsNameParserRuleCall_3_0() { return cNameAsNameParserRuleCall_3_0; }

		//at+=AT*
		public Assignment getAtAssignment_4() { return cAtAssignment_4; }

		//AT
		public RuleCall getAtATParserRuleCall_4_0() { return cAtATParserRuleCall_4_0; }

		//limit=Limites
		public Assignment getLimitAssignment_5() { return cLimitAssignment_5; }

		//Limites
		public RuleCall getLimitLimitesParserRuleCall_5_0() { return cLimitLimitesParserRuleCall_5_0; }
	}

	public class AsClassElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AsClass");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cAsClassAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cACKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameClassTypeEnumRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		
		//AsClass:
		//	{AsClass} "AC" name=ClassType?;
		public ParserRule getRule() { return rule; }

		//{AsClass} "AC" name=ClassType?
		public Group getGroup() { return cGroup; }

		//{AsClass}
		public Action getAsClassAction_0() { return cAsClassAction_0; }

		//"AC"
		public Keyword getACKeyword_1() { return cACKeyword_1; }

		//name=ClassType?
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }

		//ClassType
		public RuleCall getNameClassTypeEnumRuleCall_2_0() { return cNameClassTypeEnumRuleCall_2_0; }
	}

	public class SPElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "SP");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSPKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cSp0Assignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cSp0INTTerminalRuleCall_1_0 = (RuleCall)cSp0Assignment_1.eContents().get(0);
		private final Keyword cCommaKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cSp1Assignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cSp1INTTerminalRuleCall_3_0 = (RuleCall)cSp1Assignment_3.eContents().get(0);
		private final Keyword cCommaKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cSp2Assignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cSp2INTTerminalRuleCall_5_0 = (RuleCall)cSp2Assignment_5.eContents().get(0);
		private final Keyword cCommaKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Assignment cSp3Assignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cSp3INTTerminalRuleCall_7_0 = (RuleCall)cSp3Assignment_7.eContents().get(0);
		private final Keyword cCommaKeyword_8 = (Keyword)cGroup.eContents().get(8);
		private final Assignment cSp4Assignment_9 = (Assignment)cGroup.eContents().get(9);
		private final RuleCall cSp4INTTerminalRuleCall_9_0 = (RuleCall)cSp4Assignment_9.eContents().get(0);
		
		//SP:
		//	"SP" sp0=INT "," sp1=INT "," sp2=INT "," sp3=INT "," sp4=INT;
		public ParserRule getRule() { return rule; }

		//"SP" sp0=INT "," sp1=INT "," sp2=INT "," sp3=INT "," sp4=INT
		public Group getGroup() { return cGroup; }

		//"SP"
		public Keyword getSPKeyword_0() { return cSPKeyword_0; }

		//sp0=INT
		public Assignment getSp0Assignment_1() { return cSp0Assignment_1; }

		//INT
		public RuleCall getSp0INTTerminalRuleCall_1_0() { return cSp0INTTerminalRuleCall_1_0; }

		//","
		public Keyword getCommaKeyword_2() { return cCommaKeyword_2; }

		//sp1=INT
		public Assignment getSp1Assignment_3() { return cSp1Assignment_3; }

		//INT
		public RuleCall getSp1INTTerminalRuleCall_3_0() { return cSp1INTTerminalRuleCall_3_0; }

		//","
		public Keyword getCommaKeyword_4() { return cCommaKeyword_4; }

		//sp2=INT
		public Assignment getSp2Assignment_5() { return cSp2Assignment_5; }

		//INT
		public RuleCall getSp2INTTerminalRuleCall_5_0() { return cSp2INTTerminalRuleCall_5_0; }

		//","
		public Keyword getCommaKeyword_6() { return cCommaKeyword_6; }

		//sp3=INT
		public Assignment getSp3Assignment_7() { return cSp3Assignment_7; }

		//INT
		public RuleCall getSp3INTTerminalRuleCall_7_0() { return cSp3INTTerminalRuleCall_7_0; }

		//","
		public Keyword getCommaKeyword_8() { return cCommaKeyword_8; }

		//sp4=INT
		public Assignment getSp4Assignment_9() { return cSp4Assignment_9; }

		//INT
		public RuleCall getSp4INTTerminalRuleCall_9_0() { return cSp4INTTerminalRuleCall_9_0; }
	}

	public class SBElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "SB");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSBKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cSbVal1Assignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cSbVal1INTTerminalRuleCall_1_0 = (RuleCall)cSbVal1Assignment_1.eContents().get(0);
		private final Keyword cCommaKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cSbVal2Assignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cSbVal2INTTerminalRuleCall_3_0 = (RuleCall)cSbVal2Assignment_3.eContents().get(0);
		private final Keyword cCommaKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cSbVal3Assignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cSbVal3INTTerminalRuleCall_5_0 = (RuleCall)cSbVal3Assignment_5.eContents().get(0);
		
		//SB:
		//	"SB" sbVal1=INT "," sbVal2=INT "," sbVal3=INT;
		public ParserRule getRule() { return rule; }

		//"SB" sbVal1=INT "," sbVal2=INT "," sbVal3=INT
		public Group getGroup() { return cGroup; }

		//"SB"
		public Keyword getSBKeyword_0() { return cSBKeyword_0; }

		//sbVal1=INT
		public Assignment getSbVal1Assignment_1() { return cSbVal1Assignment_1; }

		//INT
		public RuleCall getSbVal1INTTerminalRuleCall_1_0() { return cSbVal1INTTerminalRuleCall_1_0; }

		//","
		public Keyword getCommaKeyword_2() { return cCommaKeyword_2; }

		//sbVal2=INT
		public Assignment getSbVal2Assignment_3() { return cSbVal2Assignment_3; }

		//INT
		public RuleCall getSbVal2INTTerminalRuleCall_3_0() { return cSbVal2INTTerminalRuleCall_3_0; }

		//","
		public Keyword getCommaKeyword_4() { return cCommaKeyword_4; }

		//sbVal3=INT
		public Assignment getSbVal3Assignment_5() { return cSbVal3Assignment_5; }

		//INT
		public RuleCall getSbVal3INTTerminalRuleCall_5_0() { return cSbVal3INTTerminalRuleCall_5_0; }
	}

	public class AsNameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AsName");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cANKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameSTRINGTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		
		//AsName:
		//	"AN" name=STRING;
		public ParserRule getRule() { return rule; }

		//"AN" name=STRING
		public Group getGroup() { return cGroup; }

		//"AN"
		public Keyword getANKeyword_0() { return cANKeyword_0; }

		//name=STRING
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//STRING
		public RuleCall getNameSTRINGTerminalRuleCall_1_0() { return cNameSTRINGTerminalRuleCall_1_0; }
	}

	public class LimitesElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Limites");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cLLimitParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cHLimitParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//Limites:
		//	LLimit | HLimit;
		public ParserRule getRule() { return rule; }

		//LLimit | HLimit
		public Alternatives getAlternatives() { return cAlternatives; }

		//LLimit
		public RuleCall getLLimitParserRuleCall_0() { return cLLimitParserRuleCall_0; }

		//HLimit
		public RuleCall getHLimitParserRuleCall_1() { return cHLimitParserRuleCall_1; }
	}

	public class LLimitElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "LLimit");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cLowLimitAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cLowLimitLowLimitParserRuleCall_0_0 = (RuleCall)cLowLimitAssignment_0.eContents().get(0);
		private final Assignment cHighLimitAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cHighLimitHighLimitParserRuleCall_1_0 = (RuleCall)cHighLimitAssignment_1.eContents().get(0);
		
		//LLimit:
		//	lowLimit=LowLimit highLimit=HighLimit;
		public ParserRule getRule() { return rule; }

		//lowLimit=LowLimit highLimit=HighLimit
		public Group getGroup() { return cGroup; }

		//lowLimit=LowLimit
		public Assignment getLowLimitAssignment_0() { return cLowLimitAssignment_0; }

		//LowLimit
		public RuleCall getLowLimitLowLimitParserRuleCall_0_0() { return cLowLimitLowLimitParserRuleCall_0_0; }

		//highLimit=HighLimit
		public Assignment getHighLimitAssignment_1() { return cHighLimitAssignment_1; }

		//HighLimit
		public RuleCall getHighLimitHighLimitParserRuleCall_1_0() { return cHighLimitHighLimitParserRuleCall_1_0; }
	}

	public class HLimitElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "HLimit");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cHeighLimitAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cHeighLimitHighLimitParserRuleCall_0_0 = (RuleCall)cHeighLimitAssignment_0.eContents().get(0);
		private final Assignment cLowLimitAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cLowLimitLowLimitParserRuleCall_1_0 = (RuleCall)cLowLimitAssignment_1.eContents().get(0);
		
		//HLimit:
		//	heighLimit=HighLimit lowLimit=LowLimit;
		public ParserRule getRule() { return rule; }

		//heighLimit=HighLimit lowLimit=LowLimit
		public Group getGroup() { return cGroup; }

		//heighLimit=HighLimit
		public Assignment getHeighLimitAssignment_0() { return cHeighLimitAssignment_0; }

		//HighLimit
		public RuleCall getHeighLimitHighLimitParserRuleCall_0_0() { return cHeighLimitHighLimitParserRuleCall_0_0; }

		//lowLimit=LowLimit
		public Assignment getLowLimitAssignment_1() { return cLowLimitAssignment_1; }

		//LowLimit
		public RuleCall getLowLimitLowLimitParserRuleCall_1_0() { return cLowLimitLowLimitParserRuleCall_1_0; }
	}

	public class TheGeomElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "TheGeom");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cVParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cDPParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cDAParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cDBParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cDCParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		
		//TheGeom:
		//	V | DP | DA | DB | DC;
		public ParserRule getRule() { return rule; }

		//V | DP | DA | DB | DC
		public Alternatives getAlternatives() { return cAlternatives; }

		//V
		public RuleCall getVParserRuleCall_0() { return cVParserRuleCall_0; }

		//DP
		public RuleCall getDPParserRuleCall_1() { return cDPParserRuleCall_1; }

		//DA
		public RuleCall getDAParserRuleCall_2() { return cDAParserRuleCall_2; }

		//DB
		public RuleCall getDBParserRuleCall_3() { return cDBParserRuleCall_3; }

		//DC
		public RuleCall getDCParserRuleCall_4() { return cDCParserRuleCall_4; }
	}

	public class LowLimitElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "LowLimit");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cALKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cLlAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cLlLimitParserRuleCall_1_0 = (RuleCall)cLlAssignment_1.eContents().get(0);
		
		//LowLimit:
		//	"AL" ll=Limit;
		public ParserRule getRule() { return rule; }

		//"AL" ll=Limit
		public Group getGroup() { return cGroup; }

		//"AL"
		public Keyword getALKeyword_0() { return cALKeyword_0; }

		//ll=Limit
		public Assignment getLlAssignment_1() { return cLlAssignment_1; }

		//Limit
		public RuleCall getLlLimitParserRuleCall_1_0() { return cLlLimitParserRuleCall_1_0; }
	}

	public class HighLimitElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "HighLimit");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cAHKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cHlAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cHlLimitParserRuleCall_1_0 = (RuleCall)cHlAssignment_1.eContents().get(0);
		
		//HighLimit:
		//	"AH" hl=Limit;
		public ParserRule getRule() { return rule; }

		//"AH" hl=Limit
		public Group getGroup() { return cGroup; }

		//"AH"
		public Keyword getAHKeyword_0() { return cAHKeyword_0; }

		//hl=Limit
		public Assignment getHlAssignment_1() { return cHlAssignment_1; }

		//Limit
		public RuleCall getHlLimitParserRuleCall_1_0() { return cHlLimitParserRuleCall_1_0; }
	}

	public class LimitElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Limit");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cFLParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cSFCParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cGNDParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cUNLParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cVALParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		
		//Limit:
		//	FL | SFC | GND | UNL | VAL;
		public ParserRule getRule() { return rule; }

		//FL | SFC | GND | UNL | VAL
		public Alternatives getAlternatives() { return cAlternatives; }

		//FL
		public RuleCall getFLParserRuleCall_0() { return cFLParserRuleCall_0; }

		//SFC
		public RuleCall getSFCParserRuleCall_1() { return cSFCParserRuleCall_1; }

		//GND
		public RuleCall getGNDParserRuleCall_2() { return cGNDParserRuleCall_2; }

		//UNL
		public RuleCall getUNLParserRuleCall_3() { return cUNLParserRuleCall_3; }

		//VAL
		public RuleCall getVALParserRuleCall_4() { return cVALParserRuleCall_4; }
	}

	public class FLElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "FL");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cFLKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cValueAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cValueINTTerminalRuleCall_1_0 = (RuleCall)cValueAssignment_1.eContents().get(0);
		
		//FL:
		//	"FL" value=INT;
		public ParserRule getRule() { return rule; }

		//"FL" value=INT
		public Group getGroup() { return cGroup; }

		//"FL"
		public Keyword getFLKeyword_0() { return cFLKeyword_0; }

		//value=INT
		public Assignment getValueAssignment_1() { return cValueAssignment_1; }

		//INT
		public RuleCall getValueINTTerminalRuleCall_1_0() { return cValueINTTerminalRuleCall_1_0; }
	}

	public class SFCElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "SFC");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cSFCAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cSFCKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//SFC:
		//	{SFC} "SFC";
		public ParserRule getRule() { return rule; }

		//{SFC} "SFC"
		public Group getGroup() { return cGroup; }

		//{SFC}
		public Action getSFCAction_0() { return cSFCAction_0; }

		//"SFC"
		public Keyword getSFCKeyword_1() { return cSFCKeyword_1; }
	}

	public class GNDElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "GND");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cGNDAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cGNDKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//GND:
		//	{GND} "GND";
		public ParserRule getRule() { return rule; }

		//{GND} "GND"
		public Group getGroup() { return cGroup; }

		//{GND}
		public Action getGNDAction_0() { return cGNDAction_0; }

		//"GND"
		public Keyword getGNDKeyword_1() { return cGNDKeyword_1; }
	}

	public class UNLElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "UNL");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cUNLAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cUNLKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//UNL:
		//	{UNL} "UNL";
		public ParserRule getRule() { return rule; }

		//{UNL} "UNL"
		public Group getGroup() { return cGroup; }

		//{UNL}
		public Action getUNLAction_0() { return cUNLAction_0; }

		//"UNL"
		public Keyword getUNLKeyword_1() { return cUNLKeyword_1; }
	}

	public class VALElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "VAL");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cValueAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cValueINTTerminalRuleCall_0_0 = (RuleCall)cValueAssignment_0.eContents().get(0);
		private final Assignment cUnitAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cUnitUnitsEnumRuleCall_1_0 = (RuleCall)cUnitAssignment_1.eContents().get(0);
		
		//VAL:
		//	value=INT unit=Units;
		public ParserRule getRule() { return rule; }

		//value=INT unit=Units
		public Group getGroup() { return cGroup; }

		//value=INT
		public Assignment getValueAssignment_0() { return cValueAssignment_0; }

		//INT
		public RuleCall getValueINTTerminalRuleCall_0_0() { return cValueINTTerminalRuleCall_0_0; }

		//unit=Units
		public Assignment getUnitAssignment_1() { return cUnitAssignment_1; }

		//Units
		public RuleCall getUnitUnitsEnumRuleCall_1_0() { return cUnitUnitsEnumRuleCall_1_0; }
	}

	public class VElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "V");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cVKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cVsubAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cVsubVsubParserRuleCall_1_0 = (RuleCall)cVsubAssignment_1.eContents().get(0);
		
		//V:
		//	"V" vsub=Vsub;
		public ParserRule getRule() { return rule; }

		//"V" vsub=Vsub
		public Group getGroup() { return cGroup; }

		//"V"
		public Keyword getVKeyword_0() { return cVKeyword_0; }

		//vsub=Vsub
		public Assignment getVsubAssignment_1() { return cVsubAssignment_1; }

		//Vsub
		public RuleCall getVsubVsubParserRuleCall_1_0() { return cVsubVsubParserRuleCall_1_0; }
	}

	public class VsubElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Vsub");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Keyword cXKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final Assignment cXAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cXPointParserRuleCall_0_1_0 = (RuleCall)cXAssignment_0_1.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Keyword cDKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cDAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cDDParserRuleCall_1_1_0 = (RuleCall)cDAssignment_1_1.eContents().get(0);
		
		//Vsub:
		//	"X=" x=Point | "D=" d=D;
		public ParserRule getRule() { return rule; }

		//"X=" x=Point | "D=" d=D
		public Alternatives getAlternatives() { return cAlternatives; }

		//"X=" x=Point
		public Group getGroup_0() { return cGroup_0; }

		//"X="
		public Keyword getXKeyword_0_0() { return cXKeyword_0_0; }

		//x=Point
		public Assignment getXAssignment_0_1() { return cXAssignment_0_1; }

		//Point
		public RuleCall getXPointParserRuleCall_0_1_0() { return cXPointParserRuleCall_0_1_0; }

		//"D=" d=D
		public Group getGroup_1() { return cGroup_1; }

		//"D="
		public Keyword getDKeyword_1_0() { return cDKeyword_1_0; }

		//d=D
		public Assignment getDAssignment_1_1() { return cDAssignment_1_1; }

		//D
		public RuleCall getDDParserRuleCall_1_1_0() { return cDDParserRuleCall_1_1_0; }
	}

	public class DElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "D");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cPlusSignKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cHyphenMinusKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		
		//D returns ecore::EString:
		//	"+" | "-";
		public ParserRule getRule() { return rule; }

		//"+" | "-"
		public Alternatives getAlternatives() { return cAlternatives; }

		//"+"
		public Keyword getPlusSignKeyword_0() { return cPlusSignKeyword_0; }

		//"-"
		public Keyword getHyphenMinusKeyword_1() { return cHyphenMinusKeyword_1; }
	}

	public class DCElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "DC");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cDCKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cRadiusAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cRadiusREALTerminalRuleCall_1_0 = (RuleCall)cRadiusAssignment_1.eContents().get(0);
		
		//DC:
		//	"DC" radius=REAL;
		public ParserRule getRule() { return rule; }

		//"DC" radius=REAL
		public Group getGroup() { return cGroup; }

		//"DC"
		public Keyword getDCKeyword_0() { return cDCKeyword_0; }

		//radius=REAL
		public Assignment getRadiusAssignment_1() { return cRadiusAssignment_1; }

		//REAL
		public RuleCall getRadiusREALTerminalRuleCall_1_0() { return cRadiusREALTerminalRuleCall_1_0; }
	}

	public class DPElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "DP");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cDPKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cDpAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cDpPointParserRuleCall_1_0 = (RuleCall)cDpAssignment_1.eContents().get(0);
		
		//DP:
		//	"DP" dp=Point;
		public ParserRule getRule() { return rule; }

		//"DP" dp=Point
		public Group getGroup() { return cGroup; }

		//"DP"
		public Keyword getDPKeyword_0() { return cDPKeyword_0; }

		//dp=Point
		public Assignment getDpAssignment_1() { return cDpAssignment_1; }

		//Point
		public RuleCall getDpPointParserRuleCall_1_0() { return cDpPointParserRuleCall_1_0; }
	}

	public class PointElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Point");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cPoint1ParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cPoint2ParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cPoint3ParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cPoint4ParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		
		//Point:
		//	Point1 | Point2 | Point3 | Point4;
		public ParserRule getRule() { return rule; }

		//Point1 | Point2 | Point3 | Point4
		public Alternatives getAlternatives() { return cAlternatives; }

		//Point1
		public RuleCall getPoint1ParserRuleCall_0() { return cPoint1ParserRuleCall_0; }

		//Point2
		public RuleCall getPoint2ParserRuleCall_1() { return cPoint2ParserRuleCall_1; }

		//Point3
		public RuleCall getPoint3ParserRuleCall_2() { return cPoint3ParserRuleCall_2; }

		//Point4
		public RuleCall getPoint4ParserRuleCall_3() { return cPoint4ParserRuleCall_3; }
	}

	public class Point1Elements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Point1");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cLongDAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cLongDLongDegrParserRuleCall_0_0 = (RuleCall)cLongDAssignment_0.eContents().get(0);
		private final Assignment cLongMAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cLongMMinSecParserRuleCall_1_0 = (RuleCall)cLongMAssignment_1.eContents().get(0);
		private final Assignment cLongSAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cLongSMinSecParserRuleCall_2_0 = (RuleCall)cLongSAssignment_2.eContents().get(0);
		private final Assignment cNsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cNsNSEnumRuleCall_3_0 = (RuleCall)cNsAssignment_3.eContents().get(0);
		private final Assignment cLatDAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cLatDLatDegrParserRuleCall_4_0 = (RuleCall)cLatDAssignment_4.eContents().get(0);
		private final Assignment cLatMAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cLatMMinSecParserRuleCall_5_0 = (RuleCall)cLatMAssignment_5.eContents().get(0);
		private final Assignment cLatSAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cLatSMinSecParserRuleCall_6_0 = (RuleCall)cLatSAssignment_6.eContents().get(0);
		private final Assignment cWeAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cWeWEEnumRuleCall_7_0 = (RuleCall)cWeAssignment_7.eContents().get(0);
		
		//Point1:
		//	longD=LongDegr longM=MinSec longS=MinSec ns=NS latD=LatDegr latM=MinSec latS=MinSec we=WE;
		public ParserRule getRule() { return rule; }

		//longD=LongDegr longM=MinSec longS=MinSec ns=NS latD=LatDegr latM=MinSec latS=MinSec we=WE
		public Group getGroup() { return cGroup; }

		//longD=LongDegr
		public Assignment getLongDAssignment_0() { return cLongDAssignment_0; }

		//LongDegr
		public RuleCall getLongDLongDegrParserRuleCall_0_0() { return cLongDLongDegrParserRuleCall_0_0; }

		//longM=MinSec
		public Assignment getLongMAssignment_1() { return cLongMAssignment_1; }

		//MinSec
		public RuleCall getLongMMinSecParserRuleCall_1_0() { return cLongMMinSecParserRuleCall_1_0; }

		//longS=MinSec
		public Assignment getLongSAssignment_2() { return cLongSAssignment_2; }

		//MinSec
		public RuleCall getLongSMinSecParserRuleCall_2_0() { return cLongSMinSecParserRuleCall_2_0; }

		//ns=NS
		public Assignment getNsAssignment_3() { return cNsAssignment_3; }

		//NS
		public RuleCall getNsNSEnumRuleCall_3_0() { return cNsNSEnumRuleCall_3_0; }

		//latD=LatDegr
		public Assignment getLatDAssignment_4() { return cLatDAssignment_4; }

		//LatDegr
		public RuleCall getLatDLatDegrParserRuleCall_4_0() { return cLatDLatDegrParserRuleCall_4_0; }

		//latM=MinSec
		public Assignment getLatMAssignment_5() { return cLatMAssignment_5; }

		//MinSec
		public RuleCall getLatMMinSecParserRuleCall_5_0() { return cLatMMinSecParserRuleCall_5_0; }

		//latS=MinSec
		public Assignment getLatSAssignment_6() { return cLatSAssignment_6; }

		//MinSec
		public RuleCall getLatSMinSecParserRuleCall_6_0() { return cLatSMinSecParserRuleCall_6_0; }

		//we=WE
		public Assignment getWeAssignment_7() { return cWeAssignment_7; }

		//WE
		public RuleCall getWeWEEnumRuleCall_7_0() { return cWeWEEnumRuleCall_7_0; }
	}

	public class Point2Elements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Point2");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cLongDAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cLongDLongDegrParserRuleCall_0_0 = (RuleCall)cLongDAssignment_0.eContents().get(0);
		private final Assignment cLongMfAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cLongMfMinDecParserRuleCall_1_0 = (RuleCall)cLongMfAssignment_1.eContents().get(0);
		private final Assignment cNsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNsNSEnumRuleCall_2_0 = (RuleCall)cNsAssignment_2.eContents().get(0);
		private final Assignment cLatDAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cLatDLatDegrParserRuleCall_3_0 = (RuleCall)cLatDAssignment_3.eContents().get(0);
		private final Assignment cLatMfAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cLatMfMinDecParserRuleCall_4_0 = (RuleCall)cLatMfAssignment_4.eContents().get(0);
		private final Assignment cWeAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cWeWEEnumRuleCall_5_0 = (RuleCall)cWeAssignment_5.eContents().get(0);
		
		//Point2:
		//	longD=LongDegr longMf=MinDec ns=NS latD=LatDegr latMf=MinDec we=WE;
		public ParserRule getRule() { return rule; }

		//longD=LongDegr longMf=MinDec ns=NS latD=LatDegr latMf=MinDec we=WE
		public Group getGroup() { return cGroup; }

		//longD=LongDegr
		public Assignment getLongDAssignment_0() { return cLongDAssignment_0; }

		//LongDegr
		public RuleCall getLongDLongDegrParserRuleCall_0_0() { return cLongDLongDegrParserRuleCall_0_0; }

		//longMf=MinDec
		public Assignment getLongMfAssignment_1() { return cLongMfAssignment_1; }

		//MinDec
		public RuleCall getLongMfMinDecParserRuleCall_1_0() { return cLongMfMinDecParserRuleCall_1_0; }

		//ns=NS
		public Assignment getNsAssignment_2() { return cNsAssignment_2; }

		//NS
		public RuleCall getNsNSEnumRuleCall_2_0() { return cNsNSEnumRuleCall_2_0; }

		//latD=LatDegr
		public Assignment getLatDAssignment_3() { return cLatDAssignment_3; }

		//LatDegr
		public RuleCall getLatDLatDegrParserRuleCall_3_0() { return cLatDLatDegrParserRuleCall_3_0; }

		//latMf=MinDec
		public Assignment getLatMfAssignment_4() { return cLatMfAssignment_4; }

		//MinDec
		public RuleCall getLatMfMinDecParserRuleCall_4_0() { return cLatMfMinDecParserRuleCall_4_0; }

		//we=WE
		public Assignment getWeAssignment_5() { return cWeAssignment_5; }

		//WE
		public RuleCall getWeWEEnumRuleCall_5_0() { return cWeWEEnumRuleCall_5_0; }
	}

	public class Point3Elements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Point3");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cLongDAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cLongDLongDegrParserRuleCall_0_0 = (RuleCall)cLongDAssignment_0.eContents().get(0);
		private final Assignment cLongMAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cLongMMinSecParserRuleCall_1_0 = (RuleCall)cLongMAssignment_1.eContents().get(0);
		private final Assignment cLongSAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cLongSSecDecParserRuleCall_2_0 = (RuleCall)cLongSAssignment_2.eContents().get(0);
		private final Assignment cNsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cNsNSEnumRuleCall_3_0 = (RuleCall)cNsAssignment_3.eContents().get(0);
		private final Assignment cLatDAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cLatDLatDegrParserRuleCall_4_0 = (RuleCall)cLatDAssignment_4.eContents().get(0);
		private final Assignment cLatMAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cLatMMinSecParserRuleCall_5_0 = (RuleCall)cLatMAssignment_5.eContents().get(0);
		private final Assignment cLatSAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cLatSSecDecParserRuleCall_6_0 = (RuleCall)cLatSAssignment_6.eContents().get(0);
		private final Assignment cWeAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cWeWEEnumRuleCall_7_0 = (RuleCall)cWeAssignment_7.eContents().get(0);
		
		//Point3:
		//	longD=LongDegr longM=MinSec longS=SecDec ns=NS latD=LatDegr latM=MinSec latS=SecDec we=WE;
		public ParserRule getRule() { return rule; }

		//longD=LongDegr longM=MinSec longS=SecDec ns=NS latD=LatDegr latM=MinSec latS=SecDec we=WE
		public Group getGroup() { return cGroup; }

		//longD=LongDegr
		public Assignment getLongDAssignment_0() { return cLongDAssignment_0; }

		//LongDegr
		public RuleCall getLongDLongDegrParserRuleCall_0_0() { return cLongDLongDegrParserRuleCall_0_0; }

		//longM=MinSec
		public Assignment getLongMAssignment_1() { return cLongMAssignment_1; }

		//MinSec
		public RuleCall getLongMMinSecParserRuleCall_1_0() { return cLongMMinSecParserRuleCall_1_0; }

		//longS=SecDec
		public Assignment getLongSAssignment_2() { return cLongSAssignment_2; }

		//SecDec
		public RuleCall getLongSSecDecParserRuleCall_2_0() { return cLongSSecDecParserRuleCall_2_0; }

		//ns=NS
		public Assignment getNsAssignment_3() { return cNsAssignment_3; }

		//NS
		public RuleCall getNsNSEnumRuleCall_3_0() { return cNsNSEnumRuleCall_3_0; }

		//latD=LatDegr
		public Assignment getLatDAssignment_4() { return cLatDAssignment_4; }

		//LatDegr
		public RuleCall getLatDLatDegrParserRuleCall_4_0() { return cLatDLatDegrParserRuleCall_4_0; }

		//latM=MinSec
		public Assignment getLatMAssignment_5() { return cLatMAssignment_5; }

		//MinSec
		public RuleCall getLatMMinSecParserRuleCall_5_0() { return cLatMMinSecParserRuleCall_5_0; }

		//latS=SecDec
		public Assignment getLatSAssignment_6() { return cLatSAssignment_6; }

		//SecDec
		public RuleCall getLatSSecDecParserRuleCall_6_0() { return cLatSSecDecParserRuleCall_6_0; }

		//we=WE
		public Assignment getWeAssignment_7() { return cWeAssignment_7; }

		//WE
		public RuleCall getWeWEEnumRuleCall_7_0() { return cWeWEEnumRuleCall_7_0; }
	}

	public class Point4Elements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Point4");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cLongDAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cLongDLongDecParserRuleCall_0_0 = (RuleCall)cLongDAssignment_0.eContents().get(0);
		private final Assignment cNsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNsNSEnumRuleCall_1_0 = (RuleCall)cNsAssignment_1.eContents().get(0);
		private final Assignment cLatDAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cLatDLatDecParserRuleCall_2_0 = (RuleCall)cLatDAssignment_2.eContents().get(0);
		private final Assignment cWeAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cWeWEEnumRuleCall_3_0 = (RuleCall)cWeAssignment_3.eContents().get(0);
		
		//Point4:
		//	longD=LongDec ns=NS latD=LatDec we=WE;
		public ParserRule getRule() { return rule; }

		//longD=LongDec ns=NS latD=LatDec we=WE
		public Group getGroup() { return cGroup; }

		//longD=LongDec
		public Assignment getLongDAssignment_0() { return cLongDAssignment_0; }

		//LongDec
		public RuleCall getLongDLongDecParserRuleCall_0_0() { return cLongDLongDecParserRuleCall_0_0; }

		//ns=NS
		public Assignment getNsAssignment_1() { return cNsAssignment_1; }

		//NS
		public RuleCall getNsNSEnumRuleCall_1_0() { return cNsNSEnumRuleCall_1_0; }

		//latD=LatDec
		public Assignment getLatDAssignment_2() { return cLatDAssignment_2; }

		//LatDec
		public RuleCall getLatDLatDecParserRuleCall_2_0() { return cLatDLatDecParserRuleCall_2_0; }

		//we=WE
		public Assignment getWeAssignment_3() { return cWeAssignment_3; }

		//WE
		public RuleCall getWeWEEnumRuleCall_3_0() { return cWeWEEnumRuleCall_3_0; }
	}

	public class LongDegrElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "LongDegr");
		private final Assignment cValueAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cValueINTTerminalRuleCall_0 = (RuleCall)cValueAssignment.eContents().get(0);
		
		//LongDegr:
		//	value=INT;
		public ParserRule getRule() { return rule; }

		//value=INT
		public Assignment getValueAssignment() { return cValueAssignment; }

		//INT
		public RuleCall getValueINTTerminalRuleCall_0() { return cValueINTTerminalRuleCall_0; }
	}

	public class LatDegrElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "LatDegr");
		private final Assignment cValueAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cValueINTTerminalRuleCall_0 = (RuleCall)cValueAssignment.eContents().get(0);
		
		//LatDegr:
		//	value=INT;
		public ParserRule getRule() { return rule; }

		//value=INT
		public Assignment getValueAssignment() { return cValueAssignment; }

		//INT
		public RuleCall getValueINTTerminalRuleCall_0() { return cValueINTTerminalRuleCall_0; }
	}

	public class MinSecElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "MinSec");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cColonKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cValueAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cValueINTTerminalRuleCall_1_0 = (RuleCall)cValueAssignment_1.eContents().get(0);
		
		//MinSec:
		//	":" value=INT;
		public ParserRule getRule() { return rule; }

		//":" value=INT
		public Group getGroup() { return cGroup; }

		//":"
		public Keyword getColonKeyword_0() { return cColonKeyword_0; }

		//value=INT
		public Assignment getValueAssignment_1() { return cValueAssignment_1; }

		//INT
		public RuleCall getValueINTTerminalRuleCall_1_0() { return cValueINTTerminalRuleCall_1_0; }
	}

	public class SecDecElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "SecDec");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cColonKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cValueAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cValueREALTerminalRuleCall_1_0 = (RuleCall)cValueAssignment_1.eContents().get(0);
		
		//SecDec:
		//	":" value=REAL;
		public ParserRule getRule() { return rule; }

		//":" value=REAL
		public Group getGroup() { return cGroup; }

		//":"
		public Keyword getColonKeyword_0() { return cColonKeyword_0; }

		//value=REAL
		public Assignment getValueAssignment_1() { return cValueAssignment_1; }

		//REAL
		public RuleCall getValueREALTerminalRuleCall_1_0() { return cValueREALTerminalRuleCall_1_0; }
	}

	public class MinDecElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "MinDec");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cColonKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cValueAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cValueREALTerminalRuleCall_1_0 = (RuleCall)cValueAssignment_1.eContents().get(0);
		
		//MinDec:
		//	":" value=REAL;
		public ParserRule getRule() { return rule; }

		//":" value=REAL
		public Group getGroup() { return cGroup; }

		//":"
		public Keyword getColonKeyword_0() { return cColonKeyword_0; }

		//value=REAL
		public Assignment getValueAssignment_1() { return cValueAssignment_1; }

		//REAL
		public RuleCall getValueREALTerminalRuleCall_1_0() { return cValueREALTerminalRuleCall_1_0; }
	}

	public class LongDecElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "LongDec");
		private final Assignment cValueAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cValueREALTerminalRuleCall_0 = (RuleCall)cValueAssignment.eContents().get(0);
		
		//LongDec:
		//	value=REAL;
		public ParserRule getRule() { return rule; }

		//value=REAL
		public Assignment getValueAssignment() { return cValueAssignment; }

		//REAL
		public RuleCall getValueREALTerminalRuleCall_0() { return cValueREALTerminalRuleCall_0; }
	}

	public class LatDecElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "LatDec");
		private final Assignment cValueAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cValueREALTerminalRuleCall_0 = (RuleCall)cValueAssignment.eContents().get(0);
		
		//LatDec:
		//	value=REAL;
		public ParserRule getRule() { return rule; }

		//value=REAL
		public Assignment getValueAssignment() { return cValueAssignment; }

		//REAL
		public RuleCall getValueREALTerminalRuleCall_0() { return cValueREALTerminalRuleCall_0; }
	}

	public class DAElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "DA");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cDAKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cDaAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cDaDaParamsParserRuleCall_1_0 = (RuleCall)cDaAssignment_1.eContents().get(0);
		
		//DA:
		//	"DA" da=DaParams;
		public ParserRule getRule() { return rule; }

		//"DA" da=DaParams
		public Group getGroup() { return cGroup; }

		//"DA"
		public Keyword getDAKeyword_0() { return cDAKeyword_0; }

		//da=DaParams
		public Assignment getDaAssignment_1() { return cDaAssignment_1; }

		//DaParams
		public RuleCall getDaDaParamsParserRuleCall_1_0() { return cDaDaParamsParserRuleCall_1_0; }
	}

	public class DaParamsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "DaParams");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cDaParams1ParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cDaParams2ParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//DaParams:
		//	DaParams1 | DaParams2;
		public ParserRule getRule() { return rule; }

		//DaParams1 | DaParams2
		public Alternatives getAlternatives() { return cAlternatives; }

		//DaParams1
		public RuleCall getDaParams1ParserRuleCall_0() { return cDaParams1ParserRuleCall_0; }

		//DaParams2
		public RuleCall getDaParams2ParserRuleCall_1() { return cDaParams2ParserRuleCall_1; }
	}

	public class DaParams1Elements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "DaParams1");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cRadiusAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cRadiusREALTerminalRuleCall_0_0 = (RuleCall)cRadiusAssignment_0.eContents().get(0);
		private final Keyword cCommaKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cAngleStartAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cAngleStartINTTerminalRuleCall_2_0 = (RuleCall)cAngleStartAssignment_2.eContents().get(0);
		private final Keyword cCommaKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cAngleEndAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cAngleEndINTTerminalRuleCall_4_0 = (RuleCall)cAngleEndAssignment_4.eContents().get(0);
		
		//DaParams1:
		//	radius=REAL "," angleStart=INT "," angleEnd=INT;
		public ParserRule getRule() { return rule; }

		//radius=REAL "," angleStart=INT "," angleEnd=INT
		public Group getGroup() { return cGroup; }

		//radius=REAL
		public Assignment getRadiusAssignment_0() { return cRadiusAssignment_0; }

		//REAL
		public RuleCall getRadiusREALTerminalRuleCall_0_0() { return cRadiusREALTerminalRuleCall_0_0; }

		//","
		public Keyword getCommaKeyword_1() { return cCommaKeyword_1; }

		//angleStart=INT
		public Assignment getAngleStartAssignment_2() { return cAngleStartAssignment_2; }

		//INT
		public RuleCall getAngleStartINTTerminalRuleCall_2_0() { return cAngleStartINTTerminalRuleCall_2_0; }

		//","
		public Keyword getCommaKeyword_3() { return cCommaKeyword_3; }

		//angleEnd=INT
		public Assignment getAngleEndAssignment_4() { return cAngleEndAssignment_4; }

		//INT
		public RuleCall getAngleEndINTTerminalRuleCall_4_0() { return cAngleEndINTTerminalRuleCall_4_0; }
	}

	public class DaParams2Elements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "DaParams2");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cRadiusAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cRadiusINTTerminalRuleCall_0_0 = (RuleCall)cRadiusAssignment_0.eContents().get(0);
		private final Keyword cCommaKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cAngleStartAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cAngleStartINTTerminalRuleCall_2_0 = (RuleCall)cAngleStartAssignment_2.eContents().get(0);
		private final Keyword cCommaKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cAngleEndAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cAngleEndINTTerminalRuleCall_4_0 = (RuleCall)cAngleEndAssignment_4.eContents().get(0);
		
		//DaParams2:
		//	radius=INT "," angleStart=INT "," angleEnd=INT;
		public ParserRule getRule() { return rule; }

		//radius=INT "," angleStart=INT "," angleEnd=INT
		public Group getGroup() { return cGroup; }

		//radius=INT
		public Assignment getRadiusAssignment_0() { return cRadiusAssignment_0; }

		//INT
		public RuleCall getRadiusINTTerminalRuleCall_0_0() { return cRadiusINTTerminalRuleCall_0_0; }

		//","
		public Keyword getCommaKeyword_1() { return cCommaKeyword_1; }

		//angleStart=INT
		public Assignment getAngleStartAssignment_2() { return cAngleStartAssignment_2; }

		//INT
		public RuleCall getAngleStartINTTerminalRuleCall_2_0() { return cAngleStartINTTerminalRuleCall_2_0; }

		//","
		public Keyword getCommaKeyword_3() { return cCommaKeyword_3; }

		//angleEnd=INT
		public Assignment getAngleEndAssignment_4() { return cAngleEndAssignment_4; }

		//INT
		public RuleCall getAngleEndINTTerminalRuleCall_4_0() { return cAngleEndINTTerminalRuleCall_4_0; }
	}

	public class DBElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "DB");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cDBKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cDp0Assignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cDp0PointParserRuleCall_1_0 = (RuleCall)cDp0Assignment_1.eContents().get(0);
		private final Keyword cCommaKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cDp1Assignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cDp1PointParserRuleCall_3_0 = (RuleCall)cDp1Assignment_3.eContents().get(0);
		
		//DB:
		//	"DB" dp0=Point ","? dp1=Point;
		public ParserRule getRule() { return rule; }

		//"DB" dp0=Point ","? dp1=Point
		public Group getGroup() { return cGroup; }

		//"DB"
		public Keyword getDBKeyword_0() { return cDBKeyword_0; }

		//dp0=Point
		public Assignment getDp0Assignment_1() { return cDp0Assignment_1; }

		//Point
		public RuleCall getDp0PointParserRuleCall_1_0() { return cDp0PointParserRuleCall_1_0; }

		//","?
		public Keyword getCommaKeyword_2() { return cCommaKeyword_2; }

		//dp1=Point
		public Assignment getDp1Assignment_3() { return cDp1Assignment_3; }

		//Point
		public RuleCall getDp1PointParserRuleCall_3_0() { return cDp1PointParserRuleCall_3_0; }
	}

	public class ATElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AT");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cATKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cLpAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cLpPointParserRuleCall_1_0 = (RuleCall)cLpAssignment_1.eContents().get(0);
		
		//AT:
		//	"AT" lp=Point;
		public ParserRule getRule() { return rule; }

		//"AT" lp=Point
		public Group getGroup() { return cGroup; }

		//"AT"
		public Keyword getATKeyword_0() { return cATKeyword_0; }

		//lp=Point
		public Assignment getLpAssignment_1() { return cLpAssignment_1; }

		//Point
		public RuleCall getLpPointParserRuleCall_1_0() { return cLpPointParserRuleCall_1_0; }
	}
	
	
	public class ClassTypeElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "ClassType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cAEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cAAKeyword_0_0 = (Keyword)cAEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cBEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cBBKeyword_1_0 = (Keyword)cBEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cCEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cCCKeyword_2_0 = (Keyword)cCEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cDEnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cDDKeyword_3_0 = (Keyword)cDEnumLiteralDeclaration_3.eContents().get(0);
		private final EnumLiteralDeclaration cEEnumLiteralDeclaration_4 = (EnumLiteralDeclaration)cAlternatives.eContents().get(4);
		private final Keyword cEEKeyword_4_0 = (Keyword)cEEnumLiteralDeclaration_4.eContents().get(0);
		private final EnumLiteralDeclaration cFEnumLiteralDeclaration_5 = (EnumLiteralDeclaration)cAlternatives.eContents().get(5);
		private final Keyword cFFKeyword_5_0 = (Keyword)cFEnumLiteralDeclaration_5.eContents().get(0);
		private final EnumLiteralDeclaration cGEnumLiteralDeclaration_6 = (EnumLiteralDeclaration)cAlternatives.eContents().get(6);
		private final Keyword cGGKeyword_6_0 = (Keyword)cGEnumLiteralDeclaration_6.eContents().get(0);
		private final EnumLiteralDeclaration cQEnumLiteralDeclaration_7 = (EnumLiteralDeclaration)cAlternatives.eContents().get(7);
		private final Keyword cQQKeyword_7_0 = (Keyword)cQEnumLiteralDeclaration_7.eContents().get(0);
		private final EnumLiteralDeclaration cREnumLiteralDeclaration_8 = (EnumLiteralDeclaration)cAlternatives.eContents().get(8);
		private final Keyword cRRKeyword_8_0 = (Keyword)cREnumLiteralDeclaration_8.eContents().get(0);
		private final EnumLiteralDeclaration cWEnumLiteralDeclaration_9 = (EnumLiteralDeclaration)cAlternatives.eContents().get(9);
		private final Keyword cWWKeyword_9_0 = (Keyword)cWEnumLiteralDeclaration_9.eContents().get(0);
		private final EnumLiteralDeclaration cPEnumLiteralDeclaration_10 = (EnumLiteralDeclaration)cAlternatives.eContents().get(10);
		private final Keyword cPPKeyword_10_0 = (Keyword)cPEnumLiteralDeclaration_10.eContents().get(0);
		private final EnumLiteralDeclaration cGPEnumLiteralDeclaration_11 = (EnumLiteralDeclaration)cAlternatives.eContents().get(11);
		private final Keyword cGPGPKeyword_11_0 = (Keyword)cGPEnumLiteralDeclaration_11.eContents().get(0);
		private final EnumLiteralDeclaration cTMZEnumLiteralDeclaration_12 = (EnumLiteralDeclaration)cAlternatives.eContents().get(12);
		private final Keyword cTMZTMZKeyword_12_0 = (Keyword)cTMZEnumLiteralDeclaration_12.eContents().get(0);
		private final EnumLiteralDeclaration cCTREnumLiteralDeclaration_13 = (EnumLiteralDeclaration)cAlternatives.eContents().get(13);
		private final Keyword cCTRCTRKeyword_13_0 = (Keyword)cCTREnumLiteralDeclaration_13.eContents().get(0);
		private final EnumLiteralDeclaration cRestrictedEnumLiteralDeclaration_14 = (EnumLiteralDeclaration)cAlternatives.eContents().get(14);
		private final Keyword cRestrictedRestrictedKeyword_14_0 = (Keyword)cRestrictedEnumLiteralDeclaration_14.eContents().get(0);
		private final EnumLiteralDeclaration cUKNEnumLiteralDeclaration_15 = (EnumLiteralDeclaration)cAlternatives.eContents().get(15);
		private final Keyword cUKNUKNKeyword_15_0 = (Keyword)cUKNEnumLiteralDeclaration_15.eContents().get(0);
		
		//enum ClassType:
		//	A | B | C | D | E | F | G | Q | R | W | P | GP | TMZ | CTR | Restricted | UKN;
		public EnumRule getRule() { return rule; }

		//A | B | C | D | E | F | G | Q | R | W | P | GP | TMZ | CTR | Restricted | UKN
		public Alternatives getAlternatives() { return cAlternatives; }

		//A
		public EnumLiteralDeclaration getAEnumLiteralDeclaration_0() { return cAEnumLiteralDeclaration_0; }

		//"A"
		public Keyword getAAKeyword_0_0() { return cAAKeyword_0_0; }

		//B
		public EnumLiteralDeclaration getBEnumLiteralDeclaration_1() { return cBEnumLiteralDeclaration_1; }

		//"B"
		public Keyword getBBKeyword_1_0() { return cBBKeyword_1_0; }

		//C
		public EnumLiteralDeclaration getCEnumLiteralDeclaration_2() { return cCEnumLiteralDeclaration_2; }

		//"C"
		public Keyword getCCKeyword_2_0() { return cCCKeyword_2_0; }

		//D
		public EnumLiteralDeclaration getDEnumLiteralDeclaration_3() { return cDEnumLiteralDeclaration_3; }

		//"D"
		public Keyword getDDKeyword_3_0() { return cDDKeyword_3_0; }

		//E
		public EnumLiteralDeclaration getEEnumLiteralDeclaration_4() { return cEEnumLiteralDeclaration_4; }

		//"E"
		public Keyword getEEKeyword_4_0() { return cEEKeyword_4_0; }

		//F
		public EnumLiteralDeclaration getFEnumLiteralDeclaration_5() { return cFEnumLiteralDeclaration_5; }

		//"F"
		public Keyword getFFKeyword_5_0() { return cFFKeyword_5_0; }

		//G
		public EnumLiteralDeclaration getGEnumLiteralDeclaration_6() { return cGEnumLiteralDeclaration_6; }

		//"G"
		public Keyword getGGKeyword_6_0() { return cGGKeyword_6_0; }

		//Q
		public EnumLiteralDeclaration getQEnumLiteralDeclaration_7() { return cQEnumLiteralDeclaration_7; }

		//"Q"
		public Keyword getQQKeyword_7_0() { return cQQKeyword_7_0; }

		//R
		public EnumLiteralDeclaration getREnumLiteralDeclaration_8() { return cREnumLiteralDeclaration_8; }

		//"R"
		public Keyword getRRKeyword_8_0() { return cRRKeyword_8_0; }

		//W
		public EnumLiteralDeclaration getWEnumLiteralDeclaration_9() { return cWEnumLiteralDeclaration_9; }

		//"W"
		public Keyword getWWKeyword_9_0() { return cWWKeyword_9_0; }

		//P
		public EnumLiteralDeclaration getPEnumLiteralDeclaration_10() { return cPEnumLiteralDeclaration_10; }

		//"P"
		public Keyword getPPKeyword_10_0() { return cPPKeyword_10_0; }

		//GP
		public EnumLiteralDeclaration getGPEnumLiteralDeclaration_11() { return cGPEnumLiteralDeclaration_11; }

		//"GP"
		public Keyword getGPGPKeyword_11_0() { return cGPGPKeyword_11_0; }

		//TMZ
		public EnumLiteralDeclaration getTMZEnumLiteralDeclaration_12() { return cTMZEnumLiteralDeclaration_12; }

		//"TMZ"
		public Keyword getTMZTMZKeyword_12_0() { return cTMZTMZKeyword_12_0; }

		//CTR
		public EnumLiteralDeclaration getCTREnumLiteralDeclaration_13() { return cCTREnumLiteralDeclaration_13; }

		//"CTR"
		public Keyword getCTRCTRKeyword_13_0() { return cCTRCTRKeyword_13_0; }

		//Restricted
		public EnumLiteralDeclaration getRestrictedEnumLiteralDeclaration_14() { return cRestrictedEnumLiteralDeclaration_14; }

		//"Restricted"
		public Keyword getRestrictedRestrictedKeyword_14_0() { return cRestrictedRestrictedKeyword_14_0; }

		//UKN
		public EnumLiteralDeclaration getUKNEnumLiteralDeclaration_15() { return cUKNEnumLiteralDeclaration_15; }

		//"UKN"
		public Keyword getUKNUKNKeyword_15_0() { return cUKNUKNKeyword_15_0; }
	}

	public class UnitsElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "Units");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cFeedEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cFeedFtKeyword_0_0 = (Keyword)cFeedEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cMeterEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cMeterMKeyword_1_0 = (Keyword)cMeterEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cMslEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cMslMSLKeyword_2_0 = (Keyword)cMslEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cM_mslEnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cM_mslMMSLKeyword_3_0 = (Keyword)cM_mslEnumLiteralDeclaration_3.eContents().get(0);
		private final EnumLiteralDeclaration cFt_mslEnumLiteralDeclaration_4 = (EnumLiteralDeclaration)cAlternatives.eContents().get(4);
		private final Keyword cFt_mslFtMSLKeyword_4_0 = (Keyword)cFt_mslEnumLiteralDeclaration_4.eContents().get(0);
		private final EnumLiteralDeclaration cAglEnumLiteralDeclaration_5 = (EnumLiteralDeclaration)cAlternatives.eContents().get(5);
		private final Keyword cAglAGLKeyword_5_0 = (Keyword)cAglEnumLiteralDeclaration_5.eContents().get(0);
		private final EnumLiteralDeclaration cM_aglEnumLiteralDeclaration_6 = (EnumLiteralDeclaration)cAlternatives.eContents().get(6);
		private final Keyword cM_aglMAGLKeyword_6_0 = (Keyword)cM_aglEnumLiteralDeclaration_6.eContents().get(0);
		private final EnumLiteralDeclaration cFt_AGLEnumLiteralDeclaration_7 = (EnumLiteralDeclaration)cAlternatives.eContents().get(7);
		private final Keyword cFt_AGLFtAGLKeyword_7_0 = (Keyword)cFt_AGLEnumLiteralDeclaration_7.eContents().get(0);
		private final EnumLiteralDeclaration cAMSLEnumLiteralDeclaration_8 = (EnumLiteralDeclaration)cAlternatives.eContents().get(8);
		private final Keyword cAMSLAMSLKeyword_8_0 = (Keyword)cAMSLEnumLiteralDeclaration_8.eContents().get(0);
		private final EnumLiteralDeclaration cM_AMSLEnumLiteralDeclaration_9 = (EnumLiteralDeclaration)cAlternatives.eContents().get(9);
		private final Keyword cM_AMSLMAMSLKeyword_9_0 = (Keyword)cM_AMSLEnumLiteralDeclaration_9.eContents().get(0);
		
		//enum Units:
		//	feed="ft" | meter="m" | msl="MSL" | m_msl="m MSL" | ft_msl="ft MSL" | agl="AGL" | m_agl="m AGL" | ft_AGL="ft AGL" |
		//	AMSL | m_AMSL="m AMSL";
		public EnumRule getRule() { return rule; }

		//feed="ft" | meter="m" | msl="MSL" | m_msl="m MSL" | ft_msl="ft MSL" | agl="AGL" | m_agl="m AGL" | ft_AGL="ft AGL" | AMSL
		//| m_AMSL="m AMSL"
		public Alternatives getAlternatives() { return cAlternatives; }

		//feed="ft"
		public EnumLiteralDeclaration getFeedEnumLiteralDeclaration_0() { return cFeedEnumLiteralDeclaration_0; }

		//"ft"
		public Keyword getFeedFtKeyword_0_0() { return cFeedFtKeyword_0_0; }

		//meter="m"
		public EnumLiteralDeclaration getMeterEnumLiteralDeclaration_1() { return cMeterEnumLiteralDeclaration_1; }

		//"m"
		public Keyword getMeterMKeyword_1_0() { return cMeterMKeyword_1_0; }

		//msl="MSL"
		public EnumLiteralDeclaration getMslEnumLiteralDeclaration_2() { return cMslEnumLiteralDeclaration_2; }

		//"MSL"
		public Keyword getMslMSLKeyword_2_0() { return cMslMSLKeyword_2_0; }

		//m_msl="m MSL"
		public EnumLiteralDeclaration getM_mslEnumLiteralDeclaration_3() { return cM_mslEnumLiteralDeclaration_3; }

		//"m MSL"
		public Keyword getM_mslMMSLKeyword_3_0() { return cM_mslMMSLKeyword_3_0; }

		//ft_msl="ft MSL"
		public EnumLiteralDeclaration getFt_mslEnumLiteralDeclaration_4() { return cFt_mslEnumLiteralDeclaration_4; }

		//"ft MSL"
		public Keyword getFt_mslFtMSLKeyword_4_0() { return cFt_mslFtMSLKeyword_4_0; }

		//agl="AGL"
		public EnumLiteralDeclaration getAglEnumLiteralDeclaration_5() { return cAglEnumLiteralDeclaration_5; }

		//"AGL"
		public Keyword getAglAGLKeyword_5_0() { return cAglAGLKeyword_5_0; }

		//m_agl="m AGL"
		public EnumLiteralDeclaration getM_aglEnumLiteralDeclaration_6() { return cM_aglEnumLiteralDeclaration_6; }

		//"m AGL"
		public Keyword getM_aglMAGLKeyword_6_0() { return cM_aglMAGLKeyword_6_0; }

		//ft_AGL="ft AGL"
		public EnumLiteralDeclaration getFt_AGLEnumLiteralDeclaration_7() { return cFt_AGLEnumLiteralDeclaration_7; }

		//"ft AGL"
		public Keyword getFt_AGLFtAGLKeyword_7_0() { return cFt_AGLFtAGLKeyword_7_0; }

		//AMSL
		public EnumLiteralDeclaration getAMSLEnumLiteralDeclaration_8() { return cAMSLEnumLiteralDeclaration_8; }

		//"AMSL"
		public Keyword getAMSLAMSLKeyword_8_0() { return cAMSLAMSLKeyword_8_0; }

		//m_AMSL="m AMSL"
		public EnumLiteralDeclaration getM_AMSLEnumLiteralDeclaration_9() { return cM_AMSLEnumLiteralDeclaration_9; }

		//"m AMSL"
		public Keyword getM_AMSLMAMSLKeyword_9_0() { return cM_AMSLMAMSLKeyword_9_0; }
	}

	public class WEElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "WE");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cWEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cWWKeyword_0_0 = (Keyword)cWEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cEEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cEEKeyword_1_0 = (Keyword)cEEnumLiteralDeclaration_1.eContents().get(0);
		
		//enum WE:
		//	W | E;
		public EnumRule getRule() { return rule; }

		//W | E
		public Alternatives getAlternatives() { return cAlternatives; }

		//W
		public EnumLiteralDeclaration getWEnumLiteralDeclaration_0() { return cWEnumLiteralDeclaration_0; }

		//"W"
		public Keyword getWWKeyword_0_0() { return cWWKeyword_0_0; }

		//E
		public EnumLiteralDeclaration getEEnumLiteralDeclaration_1() { return cEEnumLiteralDeclaration_1; }

		//"E"
		public Keyword getEEKeyword_1_0() { return cEEKeyword_1_0; }
	}

	public class NSElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "NS");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cNEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cNNKeyword_0_0 = (Keyword)cNEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cSEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cSSKeyword_1_0 = (Keyword)cSEnumLiteralDeclaration_1.eContents().get(0);
		
		//enum NS:
		//	N | S;
		public EnumRule getRule() { return rule; }

		//N | S
		public Alternatives getAlternatives() { return cAlternatives; }

		//N
		public EnumLiteralDeclaration getNEnumLiteralDeclaration_0() { return cNEnumLiteralDeclaration_0; }

		//"N"
		public Keyword getNNKeyword_0_0() { return cNNKeyword_0_0; }

		//S
		public EnumLiteralDeclaration getSEnumLiteralDeclaration_1() { return cSEnumLiteralDeclaration_1; }

		//"S"
		public Keyword getSSKeyword_1_0() { return cSSKeyword_1_0; }
	}
	
	private OpenAirElements pOpenAir;
	private AirspaceElements pAirspace;
	private TheDefElements pTheDef;
	private AsClassElements pAsClass;
	private ClassTypeElements unknownRuleClassType;
	private SPElements pSP;
	private SBElements pSB;
	private AsNameElements pAsName;
	private LimitesElements pLimites;
	private LLimitElements pLLimit;
	private HLimitElements pHLimit;
	private TheGeomElements pTheGeom;
	private LowLimitElements pLowLimit;
	private HighLimitElements pHighLimit;
	private LimitElements pLimit;
	private FLElements pFL;
	private SFCElements pSFC;
	private GNDElements pGND;
	private UNLElements pUNL;
	private VALElements pVAL;
	private UnitsElements unknownRuleUnits;
	private VElements pV;
	private VsubElements pVsub;
	private DElements pD;
	private DCElements pDC;
	private DPElements pDP;
	private PointElements pPoint;
	private Point1Elements pPoint1;
	private Point2Elements pPoint2;
	private Point3Elements pPoint3;
	private Point4Elements pPoint4;
	private LongDegrElements pLongDegr;
	private LatDegrElements pLatDegr;
	private MinSecElements pMinSec;
	private SecDecElements pSecDec;
	private MinDecElements pMinDec;
	private LongDecElements pLongDec;
	private LatDecElements pLatDec;
	private WEElements unknownRuleWE;
	private NSElements unknownRuleNS;
	private DAElements pDA;
	private DaParamsElements pDaParams;
	private DaParams1Elements pDaParams1;
	private DaParams2Elements pDaParams2;
	private DBElements pDB;
	private ATElements pAT;
	private TerminalRule tREAL;
	private TerminalRule tSL_COMMENT;
	
	private final GrammarProvider grammarProvider;

	private TerminalsGrammarAccess gaTerminals;

	@Inject
	public OpenAirGrammarAccess(GrammarProvider grammarProvider,
		TerminalsGrammarAccess gaTerminals) {
		this.grammarProvider = grammarProvider;
		this.gaTerminals = gaTerminals;
	}
	
	public Grammar getGrammar() {	
		return grammarProvider.getGrammar(this);
	}
	

	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//OpenAir:
	//	airspaces+=Airspace*;
	public OpenAirElements getOpenAirAccess() {
		return (pOpenAir != null) ? pOpenAir : (pOpenAir = new OpenAirElements());
	}
	
	public ParserRule getOpenAirRule() {
		return getOpenAirAccess().getRule();
	}

	//Airspace:
	//	thedef=TheDef thegeom+=TheGeom*;
	public AirspaceElements getAirspaceAccess() {
		return (pAirspace != null) ? pAirspace : (pAirspace = new AirspaceElements());
	}
	
	public ParserRule getAirspaceRule() {
		return getAirspaceAccess().getRule();
	}

	//TheDef:
	//	asclass=AsClass sp+=SP* sb+=SB* name=AsName at+=AT* limit=Limites;
	public TheDefElements getTheDefAccess() {
		return (pTheDef != null) ? pTheDef : (pTheDef = new TheDefElements());
	}
	
	public ParserRule getTheDefRule() {
		return getTheDefAccess().getRule();
	}

	//AsClass:
	//	{AsClass} "AC" name=ClassType?;
	public AsClassElements getAsClassAccess() {
		return (pAsClass != null) ? pAsClass : (pAsClass = new AsClassElements());
	}
	
	public ParserRule getAsClassRule() {
		return getAsClassAccess().getRule();
	}

	//enum ClassType:
	//	A | B | C | D | E | F | G | Q | R | W | P | GP | TMZ | CTR | Restricted | UKN;
	public ClassTypeElements getClassTypeAccess() {
		return (unknownRuleClassType != null) ? unknownRuleClassType : (unknownRuleClassType = new ClassTypeElements());
	}
	
	public EnumRule getClassTypeRule() {
		return getClassTypeAccess().getRule();
	}

	//SP:
	//	"SP" sp0=INT "," sp1=INT "," sp2=INT "," sp3=INT "," sp4=INT;
	public SPElements getSPAccess() {
		return (pSP != null) ? pSP : (pSP = new SPElements());
	}
	
	public ParserRule getSPRule() {
		return getSPAccess().getRule();
	}

	//SB:
	//	"SB" sbVal1=INT "," sbVal2=INT "," sbVal3=INT;
	public SBElements getSBAccess() {
		return (pSB != null) ? pSB : (pSB = new SBElements());
	}
	
	public ParserRule getSBRule() {
		return getSBAccess().getRule();
	}

	//AsName:
	//	"AN" name=STRING;
	public AsNameElements getAsNameAccess() {
		return (pAsName != null) ? pAsName : (pAsName = new AsNameElements());
	}
	
	public ParserRule getAsNameRule() {
		return getAsNameAccess().getRule();
	}

	//Limites:
	//	LLimit | HLimit;
	public LimitesElements getLimitesAccess() {
		return (pLimites != null) ? pLimites : (pLimites = new LimitesElements());
	}
	
	public ParserRule getLimitesRule() {
		return getLimitesAccess().getRule();
	}

	//LLimit:
	//	lowLimit=LowLimit highLimit=HighLimit;
	public LLimitElements getLLimitAccess() {
		return (pLLimit != null) ? pLLimit : (pLLimit = new LLimitElements());
	}
	
	public ParserRule getLLimitRule() {
		return getLLimitAccess().getRule();
	}

	//HLimit:
	//	heighLimit=HighLimit lowLimit=LowLimit;
	public HLimitElements getHLimitAccess() {
		return (pHLimit != null) ? pHLimit : (pHLimit = new HLimitElements());
	}
	
	public ParserRule getHLimitRule() {
		return getHLimitAccess().getRule();
	}

	//TheGeom:
	//	V | DP | DA | DB | DC;
	public TheGeomElements getTheGeomAccess() {
		return (pTheGeom != null) ? pTheGeom : (pTheGeom = new TheGeomElements());
	}
	
	public ParserRule getTheGeomRule() {
		return getTheGeomAccess().getRule();
	}

	//LowLimit:
	//	"AL" ll=Limit;
	public LowLimitElements getLowLimitAccess() {
		return (pLowLimit != null) ? pLowLimit : (pLowLimit = new LowLimitElements());
	}
	
	public ParserRule getLowLimitRule() {
		return getLowLimitAccess().getRule();
	}

	//HighLimit:
	//	"AH" hl=Limit;
	public HighLimitElements getHighLimitAccess() {
		return (pHighLimit != null) ? pHighLimit : (pHighLimit = new HighLimitElements());
	}
	
	public ParserRule getHighLimitRule() {
		return getHighLimitAccess().getRule();
	}

	//Limit:
	//	FL | SFC | GND | UNL | VAL;
	public LimitElements getLimitAccess() {
		return (pLimit != null) ? pLimit : (pLimit = new LimitElements());
	}
	
	public ParserRule getLimitRule() {
		return getLimitAccess().getRule();
	}

	//FL:
	//	"FL" value=INT;
	public FLElements getFLAccess() {
		return (pFL != null) ? pFL : (pFL = new FLElements());
	}
	
	public ParserRule getFLRule() {
		return getFLAccess().getRule();
	}

	//SFC:
	//	{SFC} "SFC";
	public SFCElements getSFCAccess() {
		return (pSFC != null) ? pSFC : (pSFC = new SFCElements());
	}
	
	public ParserRule getSFCRule() {
		return getSFCAccess().getRule();
	}

	//GND:
	//	{GND} "GND";
	public GNDElements getGNDAccess() {
		return (pGND != null) ? pGND : (pGND = new GNDElements());
	}
	
	public ParserRule getGNDRule() {
		return getGNDAccess().getRule();
	}

	//UNL:
	//	{UNL} "UNL";
	public UNLElements getUNLAccess() {
		return (pUNL != null) ? pUNL : (pUNL = new UNLElements());
	}
	
	public ParserRule getUNLRule() {
		return getUNLAccess().getRule();
	}

	//VAL:
	//	value=INT unit=Units;
	public VALElements getVALAccess() {
		return (pVAL != null) ? pVAL : (pVAL = new VALElements());
	}
	
	public ParserRule getVALRule() {
		return getVALAccess().getRule();
	}

	//enum Units:
	//	feed="ft" | meter="m" | msl="MSL" | m_msl="m MSL" | ft_msl="ft MSL" | agl="AGL" | m_agl="m AGL" | ft_AGL="ft AGL" |
	//	AMSL | m_AMSL="m AMSL";
	public UnitsElements getUnitsAccess() {
		return (unknownRuleUnits != null) ? unknownRuleUnits : (unknownRuleUnits = new UnitsElements());
	}
	
	public EnumRule getUnitsRule() {
		return getUnitsAccess().getRule();
	}

	//V:
	//	"V" vsub=Vsub;
	public VElements getVAccess() {
		return (pV != null) ? pV : (pV = new VElements());
	}
	
	public ParserRule getVRule() {
		return getVAccess().getRule();
	}

	//Vsub:
	//	"X=" x=Point | "D=" d=D;
	public VsubElements getVsubAccess() {
		return (pVsub != null) ? pVsub : (pVsub = new VsubElements());
	}
	
	public ParserRule getVsubRule() {
		return getVsubAccess().getRule();
	}

	//D returns ecore::EString:
	//	"+" | "-";
	public DElements getDAccess() {
		return (pD != null) ? pD : (pD = new DElements());
	}
	
	public ParserRule getDRule() {
		return getDAccess().getRule();
	}

	//DC:
	//	"DC" radius=REAL;
	public DCElements getDCAccess() {
		return (pDC != null) ? pDC : (pDC = new DCElements());
	}
	
	public ParserRule getDCRule() {
		return getDCAccess().getRule();
	}

	//DP:
	//	"DP" dp=Point;
	public DPElements getDPAccess() {
		return (pDP != null) ? pDP : (pDP = new DPElements());
	}
	
	public ParserRule getDPRule() {
		return getDPAccess().getRule();
	}

	//Point:
	//	Point1 | Point2 | Point3 | Point4;
	public PointElements getPointAccess() {
		return (pPoint != null) ? pPoint : (pPoint = new PointElements());
	}
	
	public ParserRule getPointRule() {
		return getPointAccess().getRule();
	}

	//Point1:
	//	longD=LongDegr longM=MinSec longS=MinSec ns=NS latD=LatDegr latM=MinSec latS=MinSec we=WE;
	public Point1Elements getPoint1Access() {
		return (pPoint1 != null) ? pPoint1 : (pPoint1 = new Point1Elements());
	}
	
	public ParserRule getPoint1Rule() {
		return getPoint1Access().getRule();
	}

	//Point2:
	//	longD=LongDegr longMf=MinDec ns=NS latD=LatDegr latMf=MinDec we=WE;
	public Point2Elements getPoint2Access() {
		return (pPoint2 != null) ? pPoint2 : (pPoint2 = new Point2Elements());
	}
	
	public ParserRule getPoint2Rule() {
		return getPoint2Access().getRule();
	}

	//Point3:
	//	longD=LongDegr longM=MinSec longS=SecDec ns=NS latD=LatDegr latM=MinSec latS=SecDec we=WE;
	public Point3Elements getPoint3Access() {
		return (pPoint3 != null) ? pPoint3 : (pPoint3 = new Point3Elements());
	}
	
	public ParserRule getPoint3Rule() {
		return getPoint3Access().getRule();
	}

	//Point4:
	//	longD=LongDec ns=NS latD=LatDec we=WE;
	public Point4Elements getPoint4Access() {
		return (pPoint4 != null) ? pPoint4 : (pPoint4 = new Point4Elements());
	}
	
	public ParserRule getPoint4Rule() {
		return getPoint4Access().getRule();
	}

	//LongDegr:
	//	value=INT;
	public LongDegrElements getLongDegrAccess() {
		return (pLongDegr != null) ? pLongDegr : (pLongDegr = new LongDegrElements());
	}
	
	public ParserRule getLongDegrRule() {
		return getLongDegrAccess().getRule();
	}

	//LatDegr:
	//	value=INT;
	public LatDegrElements getLatDegrAccess() {
		return (pLatDegr != null) ? pLatDegr : (pLatDegr = new LatDegrElements());
	}
	
	public ParserRule getLatDegrRule() {
		return getLatDegrAccess().getRule();
	}

	//MinSec:
	//	":" value=INT;
	public MinSecElements getMinSecAccess() {
		return (pMinSec != null) ? pMinSec : (pMinSec = new MinSecElements());
	}
	
	public ParserRule getMinSecRule() {
		return getMinSecAccess().getRule();
	}

	//SecDec:
	//	":" value=REAL;
	public SecDecElements getSecDecAccess() {
		return (pSecDec != null) ? pSecDec : (pSecDec = new SecDecElements());
	}
	
	public ParserRule getSecDecRule() {
		return getSecDecAccess().getRule();
	}

	//MinDec:
	//	":" value=REAL;
	public MinDecElements getMinDecAccess() {
		return (pMinDec != null) ? pMinDec : (pMinDec = new MinDecElements());
	}
	
	public ParserRule getMinDecRule() {
		return getMinDecAccess().getRule();
	}

	//LongDec:
	//	value=REAL;
	public LongDecElements getLongDecAccess() {
		return (pLongDec != null) ? pLongDec : (pLongDec = new LongDecElements());
	}
	
	public ParserRule getLongDecRule() {
		return getLongDecAccess().getRule();
	}

	//LatDec:
	//	value=REAL;
	public LatDecElements getLatDecAccess() {
		return (pLatDec != null) ? pLatDec : (pLatDec = new LatDecElements());
	}
	
	public ParserRule getLatDecRule() {
		return getLatDecAccess().getRule();
	}

	//enum WE:
	//	W | E;
	public WEElements getWEAccess() {
		return (unknownRuleWE != null) ? unknownRuleWE : (unknownRuleWE = new WEElements());
	}
	
	public EnumRule getWERule() {
		return getWEAccess().getRule();
	}

	//enum NS:
	//	N | S;
	public NSElements getNSAccess() {
		return (unknownRuleNS != null) ? unknownRuleNS : (unknownRuleNS = new NSElements());
	}
	
	public EnumRule getNSRule() {
		return getNSAccess().getRule();
	}

	//DA:
	//	"DA" da=DaParams;
	public DAElements getDAAccess() {
		return (pDA != null) ? pDA : (pDA = new DAElements());
	}
	
	public ParserRule getDARule() {
		return getDAAccess().getRule();
	}

	//DaParams:
	//	DaParams1 | DaParams2;
	public DaParamsElements getDaParamsAccess() {
		return (pDaParams != null) ? pDaParams : (pDaParams = new DaParamsElements());
	}
	
	public ParserRule getDaParamsRule() {
		return getDaParamsAccess().getRule();
	}

	//DaParams1:
	//	radius=REAL "," angleStart=INT "," angleEnd=INT;
	public DaParams1Elements getDaParams1Access() {
		return (pDaParams1 != null) ? pDaParams1 : (pDaParams1 = new DaParams1Elements());
	}
	
	public ParserRule getDaParams1Rule() {
		return getDaParams1Access().getRule();
	}

	//DaParams2:
	//	radius=INT "," angleStart=INT "," angleEnd=INT;
	public DaParams2Elements getDaParams2Access() {
		return (pDaParams2 != null) ? pDaParams2 : (pDaParams2 = new DaParams2Elements());
	}
	
	public ParserRule getDaParams2Rule() {
		return getDaParams2Access().getRule();
	}

	//DB:
	//	"DB" dp0=Point ","? dp1=Point;
	public DBElements getDBAccess() {
		return (pDB != null) ? pDB : (pDB = new DBElements());
	}
	
	public ParserRule getDBRule() {
		return getDBAccess().getRule();
	}

	//AT:
	//	"AT" lp=Point;
	public ATElements getATAccess() {
		return (pAT != null) ? pAT : (pAT = new ATElements());
	}
	
	public ParserRule getATRule() {
		return getATAccess().getRule();
	}

	//terminal REAL:
	//	"-"? INT+ "." INT+;
	public TerminalRule getREALRule() {
		return (tREAL != null) ? tREAL : (tREAL = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "REAL"));
	} 

	//terminal SL_COMMENT:
	//	"*" !("\n" | "\r")* ("\r"? "\n")?;
	public TerminalRule getSL_COMMENTRule() {
		return (tSL_COMMENT != null) ? tSL_COMMENT : (tSL_COMMENT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "SL_COMMENT"));
	} 

	//terminal ID:
	//	"^"? ("a".."z" | "A".."Z" | "_") ("a".."z" | "A".."Z" | "_" | "0".."9")*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	} 

	//terminal INT returns ecore::EInt:
	//	"0".."9"+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	} 

	//terminal STRING:
	//	"\"" ("\\" ("b" | "t" | "n" | "f" | "r" | "\"" | "\'" | "\\") | !("\\" | "\""))* "\"" | "\'" ("\\" ("b" | "t" | "n" |
	//	"f" | "r" | "\"" | "\'" | "\\") | !("\\" | "\'"))* "\'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	} 

	//terminal ML_COMMENT:
	//	"/ *"->"* /";
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	} 

	//terminal WS:
	//	(" " | "\t" | "\r" | "\n")+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	} 

	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	} 
}
