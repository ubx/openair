/*
* generated by Xtext
*/
grammar InternalOpenAir;

options {
	superClass=AbstractInternalAntlrParser;
	
}

@lexer::header {
package www.ubx.ch.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package www.ubx.ch.parser.antlr.internal; 

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.xtext.parsetree.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.common.util.Enumerator;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import org.eclipse.xtext.conversion.ValueConverterException;
import www.ubx.ch.services.OpenAirGrammarAccess;

}

@parser::members {

 	private OpenAirGrammarAccess grammarAccess;
 	
    public InternalOpenAirParser(TokenStream input, IAstFactory factory, OpenAirGrammarAccess grammarAccess) {
        this(input);
        this.factory = factory;
        registerRules(grammarAccess.getGrammar());
        this.grammarAccess = grammarAccess;
    }
    
    @Override
    protected InputStream getTokenFile() {
    	ClassLoader classLoader = getClass().getClassLoader();
    	return classLoader.getResourceAsStream("www/ubx/ch/parser/antlr/internal/InternalOpenAir.tokens");
    }
    
    @Override
    protected String getFirstRuleName() {
    	return "OpenAir";	
   	}
   	
   	@Override
   	protected OpenAirGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}
}

@rulecatch { 
    catch (RecognitionException re) { 
        recover(input,re); 
        appendSkippedTokens();
    } 
}




// Entry rule entryRuleOpenAir
entryRuleOpenAir returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getOpenAirRule(), currentNode); }
	 iv_ruleOpenAir=ruleOpenAir 
	 { $current=$iv_ruleOpenAir.current; } 
	 EOF 
;

// Rule OpenAir
ruleOpenAir returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getOpenAirAccess().getAirspacesAirspaceParserRuleCall_0(), currentNode); 
	    }
		lv_airspaces_0_0=ruleAirspace		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getOpenAirRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"airspaces",
	        		lv_airspaces_0_0, 
	        		"Airspace", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)*
;





// Entry rule entryRuleAirspace
entryRuleAirspace returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getAirspaceRule(), currentNode); }
	 iv_ruleAirspace=ruleAirspace 
	 { $current=$iv_ruleAirspace.current; } 
	 EOF 
;

// Rule Airspace
ruleAirspace returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getAirspaceAccess().getThedefTheDefParserRuleCall_0_0(), currentNode); 
	    }
		lv_thedef_0_0=ruleTheDef		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getAirspaceRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"thedef",
	        		lv_thedef_0_0, 
	        		"TheDef", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getAirspaceAccess().getThegeomTheGeomParserRuleCall_1_0(), currentNode); 
	    }
		lv_thegeom_1_0=ruleTheGeom		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getAirspaceRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"thegeom",
	        		lv_thegeom_1_0, 
	        		"TheGeom", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)*)
;





// Entry rule entryRuleTheDef
entryRuleTheDef returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getTheDefRule(), currentNode); }
	 iv_ruleTheDef=ruleTheDef 
	 { $current=$iv_ruleTheDef.current; } 
	 EOF 
;

// Rule TheDef
ruleTheDef returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getTheDefAccess().getAsclassAsClassParserRuleCall_0_0(), currentNode); 
	    }
		lv_asclass_0_0=ruleAsClass		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getTheDefRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"asclass",
	        		lv_asclass_0_0, 
	        		"AsClass", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getTheDefAccess().getSpSPParserRuleCall_1_0(), currentNode); 
	    }
		lv_sp_1_0=ruleSP		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getTheDefRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"sp",
	        		lv_sp_1_0, 
	        		"SP", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)*(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getTheDefAccess().getSbSBParserRuleCall_2_0(), currentNode); 
	    }
		lv_sb_2_0=ruleSB		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getTheDefRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"sb",
	        		lv_sb_2_0, 
	        		"SB", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)*(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getTheDefAccess().getNameAsNameParserRuleCall_3_0(), currentNode); 
	    }
		lv_name_3_0=ruleAsName		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getTheDefRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"name",
	        		lv_name_3_0, 
	        		"AsName", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getTheDefAccess().getAtATParserRuleCall_4_0(), currentNode); 
	    }
		lv_at_4_0=ruleAT		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getTheDefRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"at",
	        		lv_at_4_0, 
	        		"AT", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)*(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getTheDefAccess().getLimitLimitesParserRuleCall_5_0(), currentNode); 
	    }
		lv_limit_5_0=ruleLimites		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getTheDefRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"limit",
	        		lv_limit_5_0, 
	        		"Limites", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))
;





// Entry rule entryRuleAsClass
entryRuleAsClass returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getAsClassRule(), currentNode); }
	 iv_ruleAsClass=ruleAsClass 
	 { $current=$iv_ruleAsClass.current; } 
	 EOF 
;

// Rule AsClass
ruleAsClass returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
    { 
        temp=factory.create(grammarAccess.getAsClassAccess().getAsClassAction_0().getType().getClassifier());
        $current = temp; 
        temp = null;
        CompositeNode newNode = createCompositeNode(grammarAccess.getAsClassAccess().getAsClassAction_0(), currentNode.getParent());
    newNode.getChildren().add(currentNode);
    moveLookaheadInfo(currentNode, newNode);
    currentNode = newNode; 
        associateNodeWithAstElement(currentNode, $current); 
    }
)	'AC' 
    {
        createLeafNode(grammarAccess.getAsClassAccess().getACKeyword_1(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getAsClassAccess().getNameClassTypeEnumRuleCall_2_0(), currentNode); 
	    }
		lv_name_2_0=ruleClassType		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getAsClassRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"name",
	        		lv_name_2_0, 
	        		"ClassType", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)?)
;





// Entry rule entryRuleSP
entryRuleSP returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getSPRule(), currentNode); }
	 iv_ruleSP=ruleSP 
	 { $current=$iv_ruleSP.current; } 
	 EOF 
;

// Rule SP
ruleSP returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(	'SP' 
    {
        createLeafNode(grammarAccess.getSPAccess().getSPKeyword_0(), null); 
    }
(
(
		lv_sp0_1_0=RULE_INT
		{
			createLeafNode(grammarAccess.getSPAccess().getSp0INTTerminalRuleCall_1_0(), "sp0"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getSPRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"sp0",
	        		lv_sp0_1_0, 
	        		"INT", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)	',' 
    {
        createLeafNode(grammarAccess.getSPAccess().getCommaKeyword_2(), null); 
    }
(
(
		lv_sp1_3_0=RULE_INT
		{
			createLeafNode(grammarAccess.getSPAccess().getSp1INTTerminalRuleCall_3_0(), "sp1"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getSPRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"sp1",
	        		lv_sp1_3_0, 
	        		"INT", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)	',' 
    {
        createLeafNode(grammarAccess.getSPAccess().getCommaKeyword_4(), null); 
    }
(
(
		lv_sp2_5_0=RULE_INT
		{
			createLeafNode(grammarAccess.getSPAccess().getSp2INTTerminalRuleCall_5_0(), "sp2"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getSPRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"sp2",
	        		lv_sp2_5_0, 
	        		"INT", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)	',' 
    {
        createLeafNode(grammarAccess.getSPAccess().getCommaKeyword_6(), null); 
    }
(
(
		lv_sp3_7_0=RULE_INT
		{
			createLeafNode(grammarAccess.getSPAccess().getSp3INTTerminalRuleCall_7_0(), "sp3"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getSPRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"sp3",
	        		lv_sp3_7_0, 
	        		"INT", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)	',' 
    {
        createLeafNode(grammarAccess.getSPAccess().getCommaKeyword_8(), null); 
    }
(
(
		lv_sp4_9_0=RULE_INT
		{
			createLeafNode(grammarAccess.getSPAccess().getSp4INTTerminalRuleCall_9_0(), "sp4"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getSPRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"sp4",
	        		lv_sp4_9_0, 
	        		"INT", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
))
;





// Entry rule entryRuleSB
entryRuleSB returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getSBRule(), currentNode); }
	 iv_ruleSB=ruleSB 
	 { $current=$iv_ruleSB.current; } 
	 EOF 
;

// Rule SB
ruleSB returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(	'SB' 
    {
        createLeafNode(grammarAccess.getSBAccess().getSBKeyword_0(), null); 
    }
(
(
		lv_sbVal1_1_0=RULE_INT
		{
			createLeafNode(grammarAccess.getSBAccess().getSbVal1INTTerminalRuleCall_1_0(), "sbVal1"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getSBRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"sbVal1",
	        		lv_sbVal1_1_0, 
	        		"INT", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)	',' 
    {
        createLeafNode(grammarAccess.getSBAccess().getCommaKeyword_2(), null); 
    }
(
(
		lv_sbVal2_3_0=RULE_INT
		{
			createLeafNode(grammarAccess.getSBAccess().getSbVal2INTTerminalRuleCall_3_0(), "sbVal2"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getSBRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"sbVal2",
	        		lv_sbVal2_3_0, 
	        		"INT", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)	',' 
    {
        createLeafNode(grammarAccess.getSBAccess().getCommaKeyword_4(), null); 
    }
(
(
		lv_sbVal3_5_0=RULE_INT
		{
			createLeafNode(grammarAccess.getSBAccess().getSbVal3INTTerminalRuleCall_5_0(), "sbVal3"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getSBRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"sbVal3",
	        		lv_sbVal3_5_0, 
	        		"INT", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
))
;





// Entry rule entryRuleAsName
entryRuleAsName returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getAsNameRule(), currentNode); }
	 iv_ruleAsName=ruleAsName 
	 { $current=$iv_ruleAsName.current; } 
	 EOF 
;

// Rule AsName
ruleAsName returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(	'AN' 
    {
        createLeafNode(grammarAccess.getAsNameAccess().getANKeyword_0(), null); 
    }
(
(
		lv_name_1_0=RULE_STRING
		{
			createLeafNode(grammarAccess.getAsNameAccess().getNameSTRINGTerminalRuleCall_1_0(), "name"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getAsNameRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"name",
	        		lv_name_1_0, 
	        		"STRING", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
))
;





// Entry rule entryRuleLimites
entryRuleLimites returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getLimitesRule(), currentNode); }
	 iv_ruleLimites=ruleLimites 
	 { $current=$iv_ruleLimites.current; } 
	 EOF 
;

// Rule Limites
ruleLimites returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
    { 
        currentNode=createCompositeNode(grammarAccess.getLimitesAccess().getLLimitParserRuleCall_0(), currentNode); 
    }
    this_LLimit_0=ruleLLimit
    { 
        $current = $this_LLimit_0.current; 
        currentNode = currentNode.getParent();
    }

    |
    { 
        currentNode=createCompositeNode(grammarAccess.getLimitesAccess().getHLimitParserRuleCall_1(), currentNode); 
    }
    this_HLimit_1=ruleHLimit
    { 
        $current = $this_HLimit_1.current; 
        currentNode = currentNode.getParent();
    }
)
;





// Entry rule entryRuleLLimit
entryRuleLLimit returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getLLimitRule(), currentNode); }
	 iv_ruleLLimit=ruleLLimit 
	 { $current=$iv_ruleLLimit.current; } 
	 EOF 
;

// Rule LLimit
ruleLLimit returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getLLimitAccess().getLowLimitLowLimitParserRuleCall_0_0(), currentNode); 
	    }
		lv_lowLimit_0_0=ruleLowLimit		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getLLimitRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"lowLimit",
	        		lv_lowLimit_0_0, 
	        		"LowLimit", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getLLimitAccess().getHighLimitHighLimitParserRuleCall_1_0(), currentNode); 
	    }
		lv_highLimit_1_0=ruleHighLimit		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getLLimitRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"highLimit",
	        		lv_highLimit_1_0, 
	        		"HighLimit", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))
;





// Entry rule entryRuleHLimit
entryRuleHLimit returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getHLimitRule(), currentNode); }
	 iv_ruleHLimit=ruleHLimit 
	 { $current=$iv_ruleHLimit.current; } 
	 EOF 
;

// Rule HLimit
ruleHLimit returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getHLimitAccess().getHeighLimitHighLimitParserRuleCall_0_0(), currentNode); 
	    }
		lv_heighLimit_0_0=ruleHighLimit		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getHLimitRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"heighLimit",
	        		lv_heighLimit_0_0, 
	        		"HighLimit", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getHLimitAccess().getLowLimitLowLimitParserRuleCall_1_0(), currentNode); 
	    }
		lv_lowLimit_1_0=ruleLowLimit		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getHLimitRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"lowLimit",
	        		lv_lowLimit_1_0, 
	        		"LowLimit", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))
;





// Entry rule entryRuleTheGeom
entryRuleTheGeom returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getTheGeomRule(), currentNode); }
	 iv_ruleTheGeom=ruleTheGeom 
	 { $current=$iv_ruleTheGeom.current; } 
	 EOF 
;

// Rule TheGeom
ruleTheGeom returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
    { 
        currentNode=createCompositeNode(grammarAccess.getTheGeomAccess().getVParserRuleCall_0(), currentNode); 
    }
    this_V_0=ruleV
    { 
        $current = $this_V_0.current; 
        currentNode = currentNode.getParent();
    }

    |
    { 
        currentNode=createCompositeNode(grammarAccess.getTheGeomAccess().getDPParserRuleCall_1(), currentNode); 
    }
    this_DP_1=ruleDP
    { 
        $current = $this_DP_1.current; 
        currentNode = currentNode.getParent();
    }

    |
    { 
        currentNode=createCompositeNode(grammarAccess.getTheGeomAccess().getDAParserRuleCall_2(), currentNode); 
    }
    this_DA_2=ruleDA
    { 
        $current = $this_DA_2.current; 
        currentNode = currentNode.getParent();
    }

    |
    { 
        currentNode=createCompositeNode(grammarAccess.getTheGeomAccess().getDBParserRuleCall_3(), currentNode); 
    }
    this_DB_3=ruleDB
    { 
        $current = $this_DB_3.current; 
        currentNode = currentNode.getParent();
    }

    |
    { 
        currentNode=createCompositeNode(grammarAccess.getTheGeomAccess().getDCParserRuleCall_4(), currentNode); 
    }
    this_DC_4=ruleDC
    { 
        $current = $this_DC_4.current; 
        currentNode = currentNode.getParent();
    }
)
;





// Entry rule entryRuleLowLimit
entryRuleLowLimit returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getLowLimitRule(), currentNode); }
	 iv_ruleLowLimit=ruleLowLimit 
	 { $current=$iv_ruleLowLimit.current; } 
	 EOF 
;

// Rule LowLimit
ruleLowLimit returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(	'AL' 
    {
        createLeafNode(grammarAccess.getLowLimitAccess().getALKeyword_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getLowLimitAccess().getLlLimitParserRuleCall_1_0(), currentNode); 
	    }
		lv_ll_1_0=ruleLimit		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getLowLimitRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"ll",
	        		lv_ll_1_0, 
	        		"Limit", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))
;





// Entry rule entryRuleHighLimit
entryRuleHighLimit returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getHighLimitRule(), currentNode); }
	 iv_ruleHighLimit=ruleHighLimit 
	 { $current=$iv_ruleHighLimit.current; } 
	 EOF 
;

// Rule HighLimit
ruleHighLimit returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(	'AH' 
    {
        createLeafNode(grammarAccess.getHighLimitAccess().getAHKeyword_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getHighLimitAccess().getHlLimitParserRuleCall_1_0(), currentNode); 
	    }
		lv_hl_1_0=ruleLimit		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getHighLimitRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"hl",
	        		lv_hl_1_0, 
	        		"Limit", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))
;





// Entry rule entryRuleLimit
entryRuleLimit returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getLimitRule(), currentNode); }
	 iv_ruleLimit=ruleLimit 
	 { $current=$iv_ruleLimit.current; } 
	 EOF 
;

// Rule Limit
ruleLimit returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
    { 
        currentNode=createCompositeNode(grammarAccess.getLimitAccess().getFLParserRuleCall_0(), currentNode); 
    }
    this_FL_0=ruleFL
    { 
        $current = $this_FL_0.current; 
        currentNode = currentNode.getParent();
    }

    |
    { 
        currentNode=createCompositeNode(grammarAccess.getLimitAccess().getSFCParserRuleCall_1(), currentNode); 
    }
    this_SFC_1=ruleSFC
    { 
        $current = $this_SFC_1.current; 
        currentNode = currentNode.getParent();
    }

    |
    { 
        currentNode=createCompositeNode(grammarAccess.getLimitAccess().getGNDParserRuleCall_2(), currentNode); 
    }
    this_GND_2=ruleGND
    { 
        $current = $this_GND_2.current; 
        currentNode = currentNode.getParent();
    }

    |
    { 
        currentNode=createCompositeNode(grammarAccess.getLimitAccess().getUNLParserRuleCall_3(), currentNode); 
    }
    this_UNL_3=ruleUNL
    { 
        $current = $this_UNL_3.current; 
        currentNode = currentNode.getParent();
    }

    |
    { 
        currentNode=createCompositeNode(grammarAccess.getLimitAccess().getVALParserRuleCall_4(), currentNode); 
    }
    this_VAL_4=ruleVAL
    { 
        $current = $this_VAL_4.current; 
        currentNode = currentNode.getParent();
    }
)
;





// Entry rule entryRuleFL
entryRuleFL returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getFLRule(), currentNode); }
	 iv_ruleFL=ruleFL 
	 { $current=$iv_ruleFL.current; } 
	 EOF 
;

// Rule FL
ruleFL returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(	'FL' 
    {
        createLeafNode(grammarAccess.getFLAccess().getFLKeyword_0(), null); 
    }
(
(
		lv_value_1_0=RULE_INT
		{
			createLeafNode(grammarAccess.getFLAccess().getValueINTTerminalRuleCall_1_0(), "value"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getFLRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"value",
	        		lv_value_1_0, 
	        		"INT", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
))
;





// Entry rule entryRuleSFC
entryRuleSFC returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getSFCRule(), currentNode); }
	 iv_ruleSFC=ruleSFC 
	 { $current=$iv_ruleSFC.current; } 
	 EOF 
;

// Rule SFC
ruleSFC returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
    { 
        temp=factory.create(grammarAccess.getSFCAccess().getSFCAction_0().getType().getClassifier());
        $current = temp; 
        temp = null;
        CompositeNode newNode = createCompositeNode(grammarAccess.getSFCAccess().getSFCAction_0(), currentNode.getParent());
    newNode.getChildren().add(currentNode);
    moveLookaheadInfo(currentNode, newNode);
    currentNode = newNode; 
        associateNodeWithAstElement(currentNode, $current); 
    }
)	'SFC' 
    {
        createLeafNode(grammarAccess.getSFCAccess().getSFCKeyword_1(), null); 
    }
)
;





// Entry rule entryRuleGND
entryRuleGND returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getGNDRule(), currentNode); }
	 iv_ruleGND=ruleGND 
	 { $current=$iv_ruleGND.current; } 
	 EOF 
;

// Rule GND
ruleGND returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
    { 
        temp=factory.create(grammarAccess.getGNDAccess().getGNDAction_0().getType().getClassifier());
        $current = temp; 
        temp = null;
        CompositeNode newNode = createCompositeNode(grammarAccess.getGNDAccess().getGNDAction_0(), currentNode.getParent());
    newNode.getChildren().add(currentNode);
    moveLookaheadInfo(currentNode, newNode);
    currentNode = newNode; 
        associateNodeWithAstElement(currentNode, $current); 
    }
)	'GND' 
    {
        createLeafNode(grammarAccess.getGNDAccess().getGNDKeyword_1(), null); 
    }
)
;





// Entry rule entryRuleUNL
entryRuleUNL returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getUNLRule(), currentNode); }
	 iv_ruleUNL=ruleUNL 
	 { $current=$iv_ruleUNL.current; } 
	 EOF 
;

// Rule UNL
ruleUNL returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
    { 
        temp=factory.create(grammarAccess.getUNLAccess().getUNLAction_0().getType().getClassifier());
        $current = temp; 
        temp = null;
        CompositeNode newNode = createCompositeNode(grammarAccess.getUNLAccess().getUNLAction_0(), currentNode.getParent());
    newNode.getChildren().add(currentNode);
    moveLookaheadInfo(currentNode, newNode);
    currentNode = newNode; 
        associateNodeWithAstElement(currentNode, $current); 
    }
)	'UNL' 
    {
        createLeafNode(grammarAccess.getUNLAccess().getUNLKeyword_1(), null); 
    }
)
;





// Entry rule entryRuleVAL
entryRuleVAL returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getVALRule(), currentNode); }
	 iv_ruleVAL=ruleVAL 
	 { $current=$iv_ruleVAL.current; } 
	 EOF 
;

// Rule VAL
ruleVAL returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
(
		lv_value_0_0=RULE_INT
		{
			createLeafNode(grammarAccess.getVALAccess().getValueINTTerminalRuleCall_0_0(), "value"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getVALRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"value",
	        		lv_value_0_0, 
	        		"INT", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getVALAccess().getUnitUnitsEnumRuleCall_1_0(), currentNode); 
	    }
		lv_unit_1_0=ruleUnits		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getVALRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"unit",
	        		lv_unit_1_0, 
	        		"Units", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))
;





// Entry rule entryRuleV
entryRuleV returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getVRule(), currentNode); }
	 iv_ruleV=ruleV 
	 { $current=$iv_ruleV.current; } 
	 EOF 
;

// Rule V
ruleV returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(	'V' 
    {
        createLeafNode(grammarAccess.getVAccess().getVKeyword_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getVAccess().getVsubVsubParserRuleCall_1_0(), currentNode); 
	    }
		lv_vsub_1_0=ruleVsub		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getVRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"vsub",
	        		lv_vsub_1_0, 
	        		"Vsub", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))
;





// Entry rule entryRuleVsub
entryRuleVsub returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getVsubRule(), currentNode); }
	 iv_ruleVsub=ruleVsub 
	 { $current=$iv_ruleVsub.current; } 
	 EOF 
;

// Rule Vsub
ruleVsub returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((	'X=' 
    {
        createLeafNode(grammarAccess.getVsubAccess().getXKeyword_0_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getVsubAccess().getXPointParserRuleCall_0_1_0(), currentNode); 
	    }
		lv_x_1_0=rulePoint		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getVsubRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"x",
	        		lv_x_1_0, 
	        		"Point", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))
    |(	'D=' 
    {
        createLeafNode(grammarAccess.getVsubAccess().getDKeyword_1_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getVsubAccess().getDDParserRuleCall_1_1_0(), currentNode); 
	    }
		lv_d_3_0=ruleD		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getVsubRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"d",
	        		lv_d_3_0, 
	        		"D", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)))
;





// Entry rule entryRuleD
entryRuleD returns [String current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getDRule(), currentNode); } 
	 iv_ruleD=ruleD 
	 { $current=$iv_ruleD.current.getText(); }  
	 EOF 
;

// Rule D
ruleD returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
	    lastConsumedNode = currentNode;
    }:
(
	kw='+' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getDAccess().getPlusSignKeyword_0(), null); 
    }

    |
	kw='-' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getDAccess().getHyphenMinusKeyword_1(), null); 
    }
)
    ;





// Entry rule entryRuleDC
entryRuleDC returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getDCRule(), currentNode); }
	 iv_ruleDC=ruleDC 
	 { $current=$iv_ruleDC.current; } 
	 EOF 
;

// Rule DC
ruleDC returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(	'DC' 
    {
        createLeafNode(grammarAccess.getDCAccess().getDCKeyword_0(), null); 
    }
(
(
		lv_radius_1_0=RULE_REAL
		{
			createLeafNode(grammarAccess.getDCAccess().getRadiusREALTerminalRuleCall_1_0(), "radius"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getDCRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"radius",
	        		lv_radius_1_0, 
	        		"REAL", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
))
;





// Entry rule entryRuleDP
entryRuleDP returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getDPRule(), currentNode); }
	 iv_ruleDP=ruleDP 
	 { $current=$iv_ruleDP.current; } 
	 EOF 
;

// Rule DP
ruleDP returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(	'DP' 
    {
        createLeafNode(grammarAccess.getDPAccess().getDPKeyword_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getDPAccess().getDpPointParserRuleCall_1_0(), currentNode); 
	    }
		lv_dp_1_0=rulePoint		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getDPRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"dp",
	        		lv_dp_1_0, 
	        		"Point", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))
;





// Entry rule entryRulePoint
entryRulePoint returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getPointRule(), currentNode); }
	 iv_rulePoint=rulePoint 
	 { $current=$iv_rulePoint.current; } 
	 EOF 
;

// Rule Point
rulePoint returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
    { 
        currentNode=createCompositeNode(grammarAccess.getPointAccess().getPoint1ParserRuleCall_0(), currentNode); 
    }
    this_Point1_0=rulePoint1
    { 
        $current = $this_Point1_0.current; 
        currentNode = currentNode.getParent();
    }

    |
    { 
        currentNode=createCompositeNode(grammarAccess.getPointAccess().getPoint2ParserRuleCall_1(), currentNode); 
    }
    this_Point2_1=rulePoint2
    { 
        $current = $this_Point2_1.current; 
        currentNode = currentNode.getParent();
    }

    |
    { 
        currentNode=createCompositeNode(grammarAccess.getPointAccess().getPoint3ParserRuleCall_2(), currentNode); 
    }
    this_Point3_2=rulePoint3
    { 
        $current = $this_Point3_2.current; 
        currentNode = currentNode.getParent();
    }

    |
    { 
        currentNode=createCompositeNode(grammarAccess.getPointAccess().getPoint4ParserRuleCall_3(), currentNode); 
    }
    this_Point4_3=rulePoint4
    { 
        $current = $this_Point4_3.current; 
        currentNode = currentNode.getParent();
    }
)
;





// Entry rule entryRulePoint1
entryRulePoint1 returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getPoint1Rule(), currentNode); }
	 iv_rulePoint1=rulePoint1 
	 { $current=$iv_rulePoint1.current; } 
	 EOF 
;

// Rule Point1
rulePoint1 returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getPoint1Access().getLongDLongDegrParserRuleCall_0_0(), currentNode); 
	    }
		lv_longD_0_0=ruleLongDegr		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getPoint1Rule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"longD",
	        		lv_longD_0_0, 
	        		"LongDegr", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getPoint1Access().getLongMMinSecParserRuleCall_1_0(), currentNode); 
	    }
		lv_longM_1_0=ruleMinSec		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getPoint1Rule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"longM",
	        		lv_longM_1_0, 
	        		"MinSec", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getPoint1Access().getLongSMinSecParserRuleCall_2_0(), currentNode); 
	    }
		lv_longS_2_0=ruleMinSec		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getPoint1Rule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"longS",
	        		lv_longS_2_0, 
	        		"MinSec", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getPoint1Access().getNsNSEnumRuleCall_3_0(), currentNode); 
	    }
		lv_ns_3_0=ruleNS		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getPoint1Rule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"ns",
	        		lv_ns_3_0, 
	        		"NS", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getPoint1Access().getLatDLatDegrParserRuleCall_4_0(), currentNode); 
	    }
		lv_latD_4_0=ruleLatDegr		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getPoint1Rule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"latD",
	        		lv_latD_4_0, 
	        		"LatDegr", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getPoint1Access().getLatMMinSecParserRuleCall_5_0(), currentNode); 
	    }
		lv_latM_5_0=ruleMinSec		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getPoint1Rule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"latM",
	        		lv_latM_5_0, 
	        		"MinSec", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getPoint1Access().getLatSMinSecParserRuleCall_6_0(), currentNode); 
	    }
		lv_latS_6_0=ruleMinSec		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getPoint1Rule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"latS",
	        		lv_latS_6_0, 
	        		"MinSec", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getPoint1Access().getWeWEEnumRuleCall_7_0(), currentNode); 
	    }
		lv_we_7_0=ruleWE		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getPoint1Rule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"we",
	        		lv_we_7_0, 
	        		"WE", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))
;





// Entry rule entryRulePoint2
entryRulePoint2 returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getPoint2Rule(), currentNode); }
	 iv_rulePoint2=rulePoint2 
	 { $current=$iv_rulePoint2.current; } 
	 EOF 
;

// Rule Point2
rulePoint2 returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getPoint2Access().getLongDLongDegrParserRuleCall_0_0(), currentNode); 
	    }
		lv_longD_0_0=ruleLongDegr		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getPoint2Rule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"longD",
	        		lv_longD_0_0, 
	        		"LongDegr", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getPoint2Access().getLongMfMinDecParserRuleCall_1_0(), currentNode); 
	    }
		lv_longMf_1_0=ruleMinDec		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getPoint2Rule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"longMf",
	        		lv_longMf_1_0, 
	        		"MinDec", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getPoint2Access().getNsNSEnumRuleCall_2_0(), currentNode); 
	    }
		lv_ns_2_0=ruleNS		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getPoint2Rule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"ns",
	        		lv_ns_2_0, 
	        		"NS", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getPoint2Access().getLatDLatDegrParserRuleCall_3_0(), currentNode); 
	    }
		lv_latD_3_0=ruleLatDegr		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getPoint2Rule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"latD",
	        		lv_latD_3_0, 
	        		"LatDegr", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getPoint2Access().getLatMfMinDecParserRuleCall_4_0(), currentNode); 
	    }
		lv_latMf_4_0=ruleMinDec		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getPoint2Rule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"latMf",
	        		lv_latMf_4_0, 
	        		"MinDec", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getPoint2Access().getWeWEEnumRuleCall_5_0(), currentNode); 
	    }
		lv_we_5_0=ruleWE		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getPoint2Rule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"we",
	        		lv_we_5_0, 
	        		"WE", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))
;





// Entry rule entryRulePoint3
entryRulePoint3 returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getPoint3Rule(), currentNode); }
	 iv_rulePoint3=rulePoint3 
	 { $current=$iv_rulePoint3.current; } 
	 EOF 
;

// Rule Point3
rulePoint3 returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getPoint3Access().getLongDLongDegrParserRuleCall_0_0(), currentNode); 
	    }
		lv_longD_0_0=ruleLongDegr		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getPoint3Rule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"longD",
	        		lv_longD_0_0, 
	        		"LongDegr", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getPoint3Access().getLongMMinSecParserRuleCall_1_0(), currentNode); 
	    }
		lv_longM_1_0=ruleMinSec		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getPoint3Rule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"longM",
	        		lv_longM_1_0, 
	        		"MinSec", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getPoint3Access().getLongSSecDecParserRuleCall_2_0(), currentNode); 
	    }
		lv_longS_2_0=ruleSecDec		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getPoint3Rule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"longS",
	        		lv_longS_2_0, 
	        		"SecDec", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getPoint3Access().getNsNSEnumRuleCall_3_0(), currentNode); 
	    }
		lv_ns_3_0=ruleNS		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getPoint3Rule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"ns",
	        		lv_ns_3_0, 
	        		"NS", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getPoint3Access().getLatDLatDegrParserRuleCall_4_0(), currentNode); 
	    }
		lv_latD_4_0=ruleLatDegr		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getPoint3Rule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"latD",
	        		lv_latD_4_0, 
	        		"LatDegr", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getPoint3Access().getLatMMinSecParserRuleCall_5_0(), currentNode); 
	    }
		lv_latM_5_0=ruleMinSec		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getPoint3Rule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"latM",
	        		lv_latM_5_0, 
	        		"MinSec", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getPoint3Access().getLatSSecDecParserRuleCall_6_0(), currentNode); 
	    }
		lv_latS_6_0=ruleSecDec		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getPoint3Rule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"latS",
	        		lv_latS_6_0, 
	        		"SecDec", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getPoint3Access().getWeWEEnumRuleCall_7_0(), currentNode); 
	    }
		lv_we_7_0=ruleWE		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getPoint3Rule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"we",
	        		lv_we_7_0, 
	        		"WE", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))
;





// Entry rule entryRulePoint4
entryRulePoint4 returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getPoint4Rule(), currentNode); }
	 iv_rulePoint4=rulePoint4 
	 { $current=$iv_rulePoint4.current; } 
	 EOF 
;

// Rule Point4
rulePoint4 returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getPoint4Access().getLongDLongDecParserRuleCall_0_0(), currentNode); 
	    }
		lv_longD_0_0=ruleLongDec		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getPoint4Rule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"longD",
	        		lv_longD_0_0, 
	        		"LongDec", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getPoint4Access().getNsNSEnumRuleCall_1_0(), currentNode); 
	    }
		lv_ns_1_0=ruleNS		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getPoint4Rule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"ns",
	        		lv_ns_1_0, 
	        		"NS", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getPoint4Access().getLatDLatDecParserRuleCall_2_0(), currentNode); 
	    }
		lv_latD_2_0=ruleLatDec		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getPoint4Rule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"latD",
	        		lv_latD_2_0, 
	        		"LatDec", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getPoint4Access().getWeWEEnumRuleCall_3_0(), currentNode); 
	    }
		lv_we_3_0=ruleWE		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getPoint4Rule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"we",
	        		lv_we_3_0, 
	        		"WE", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))
;





// Entry rule entryRuleLongDegr
entryRuleLongDegr returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getLongDegrRule(), currentNode); }
	 iv_ruleLongDegr=ruleLongDegr 
	 { $current=$iv_ruleLongDegr.current; } 
	 EOF 
;

// Rule LongDegr
ruleLongDegr returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
(
		lv_value_0_0=RULE_INT
		{
			createLeafNode(grammarAccess.getLongDegrAccess().getValueINTTerminalRuleCall_0(), "value"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getLongDegrRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"value",
	        		lv_value_0_0, 
	        		"INT", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)
;





// Entry rule entryRuleLatDegr
entryRuleLatDegr returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getLatDegrRule(), currentNode); }
	 iv_ruleLatDegr=ruleLatDegr 
	 { $current=$iv_ruleLatDegr.current; } 
	 EOF 
;

// Rule LatDegr
ruleLatDegr returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
(
		lv_value_0_0=RULE_INT
		{
			createLeafNode(grammarAccess.getLatDegrAccess().getValueINTTerminalRuleCall_0(), "value"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getLatDegrRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"value",
	        		lv_value_0_0, 
	        		"INT", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)
;





// Entry rule entryRuleMinSec
entryRuleMinSec returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getMinSecRule(), currentNode); }
	 iv_ruleMinSec=ruleMinSec 
	 { $current=$iv_ruleMinSec.current; } 
	 EOF 
;

// Rule MinSec
ruleMinSec returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(	':' 
    {
        createLeafNode(grammarAccess.getMinSecAccess().getColonKeyword_0(), null); 
    }
(
(
		lv_value_1_0=RULE_INT
		{
			createLeafNode(grammarAccess.getMinSecAccess().getValueINTTerminalRuleCall_1_0(), "value"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getMinSecRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"value",
	        		lv_value_1_0, 
	        		"INT", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
))
;





// Entry rule entryRuleSecDec
entryRuleSecDec returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getSecDecRule(), currentNode); }
	 iv_ruleSecDec=ruleSecDec 
	 { $current=$iv_ruleSecDec.current; } 
	 EOF 
;

// Rule SecDec
ruleSecDec returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(	':' 
    {
        createLeafNode(grammarAccess.getSecDecAccess().getColonKeyword_0(), null); 
    }
(
(
		lv_value_1_0=RULE_REAL
		{
			createLeafNode(grammarAccess.getSecDecAccess().getValueREALTerminalRuleCall_1_0(), "value"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getSecDecRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"value",
	        		lv_value_1_0, 
	        		"REAL", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
))
;





// Entry rule entryRuleMinDec
entryRuleMinDec returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getMinDecRule(), currentNode); }
	 iv_ruleMinDec=ruleMinDec 
	 { $current=$iv_ruleMinDec.current; } 
	 EOF 
;

// Rule MinDec
ruleMinDec returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(	':' 
    {
        createLeafNode(grammarAccess.getMinDecAccess().getColonKeyword_0(), null); 
    }
(
(
		lv_value_1_0=RULE_REAL
		{
			createLeafNode(grammarAccess.getMinDecAccess().getValueREALTerminalRuleCall_1_0(), "value"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getMinDecRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"value",
	        		lv_value_1_0, 
	        		"REAL", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
))
;





// Entry rule entryRuleLongDec
entryRuleLongDec returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getLongDecRule(), currentNode); }
	 iv_ruleLongDec=ruleLongDec 
	 { $current=$iv_ruleLongDec.current; } 
	 EOF 
;

// Rule LongDec
ruleLongDec returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
(
		lv_value_0_0=RULE_REAL
		{
			createLeafNode(grammarAccess.getLongDecAccess().getValueREALTerminalRuleCall_0(), "value"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getLongDecRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"value",
	        		lv_value_0_0, 
	        		"REAL", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)
;





// Entry rule entryRuleLatDec
entryRuleLatDec returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getLatDecRule(), currentNode); }
	 iv_ruleLatDec=ruleLatDec 
	 { $current=$iv_ruleLatDec.current; } 
	 EOF 
;

// Rule LatDec
ruleLatDec returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
(
		lv_value_0_0=RULE_REAL
		{
			createLeafNode(grammarAccess.getLatDecAccess().getValueREALTerminalRuleCall_0(), "value"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getLatDecRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"value",
	        		lv_value_0_0, 
	        		"REAL", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)
;





// Entry rule entryRuleDA
entryRuleDA returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getDARule(), currentNode); }
	 iv_ruleDA=ruleDA 
	 { $current=$iv_ruleDA.current; } 
	 EOF 
;

// Rule DA
ruleDA returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(	'DA' 
    {
        createLeafNode(grammarAccess.getDAAccess().getDAKeyword_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getDAAccess().getDaDaParamsParserRuleCall_1_0(), currentNode); 
	    }
		lv_da_1_0=ruleDaParams		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getDARule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"da",
	        		lv_da_1_0, 
	        		"DaParams", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))
;





// Entry rule entryRuleDaParams
entryRuleDaParams returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getDaParamsRule(), currentNode); }
	 iv_ruleDaParams=ruleDaParams 
	 { $current=$iv_ruleDaParams.current; } 
	 EOF 
;

// Rule DaParams
ruleDaParams returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
    { 
        currentNode=createCompositeNode(grammarAccess.getDaParamsAccess().getDaParams1ParserRuleCall_0(), currentNode); 
    }
    this_DaParams1_0=ruleDaParams1
    { 
        $current = $this_DaParams1_0.current; 
        currentNode = currentNode.getParent();
    }

    |
    { 
        currentNode=createCompositeNode(grammarAccess.getDaParamsAccess().getDaParams2ParserRuleCall_1(), currentNode); 
    }
    this_DaParams2_1=ruleDaParams2
    { 
        $current = $this_DaParams2_1.current; 
        currentNode = currentNode.getParent();
    }
)
;





// Entry rule entryRuleDaParams1
entryRuleDaParams1 returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getDaParams1Rule(), currentNode); }
	 iv_ruleDaParams1=ruleDaParams1 
	 { $current=$iv_ruleDaParams1.current; } 
	 EOF 
;

// Rule DaParams1
ruleDaParams1 returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
(
		lv_radius_0_0=RULE_REAL
		{
			createLeafNode(grammarAccess.getDaParams1Access().getRadiusREALTerminalRuleCall_0_0(), "radius"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getDaParams1Rule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"radius",
	        		lv_radius_0_0, 
	        		"REAL", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)	',' 
    {
        createLeafNode(grammarAccess.getDaParams1Access().getCommaKeyword_1(), null); 
    }
(
(
		lv_angleStart_2_0=RULE_INT
		{
			createLeafNode(grammarAccess.getDaParams1Access().getAngleStartINTTerminalRuleCall_2_0(), "angleStart"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getDaParams1Rule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"angleStart",
	        		lv_angleStart_2_0, 
	        		"INT", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)	',' 
    {
        createLeafNode(grammarAccess.getDaParams1Access().getCommaKeyword_3(), null); 
    }
(
(
		lv_angleEnd_4_0=RULE_INT
		{
			createLeafNode(grammarAccess.getDaParams1Access().getAngleEndINTTerminalRuleCall_4_0(), "angleEnd"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getDaParams1Rule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"angleEnd",
	        		lv_angleEnd_4_0, 
	        		"INT", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
))
;





// Entry rule entryRuleDaParams2
entryRuleDaParams2 returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getDaParams2Rule(), currentNode); }
	 iv_ruleDaParams2=ruleDaParams2 
	 { $current=$iv_ruleDaParams2.current; } 
	 EOF 
;

// Rule DaParams2
ruleDaParams2 returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
(
		lv_radius_0_0=RULE_INT
		{
			createLeafNode(grammarAccess.getDaParams2Access().getRadiusINTTerminalRuleCall_0_0(), "radius"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getDaParams2Rule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"radius",
	        		lv_radius_0_0, 
	        		"INT", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)	',' 
    {
        createLeafNode(grammarAccess.getDaParams2Access().getCommaKeyword_1(), null); 
    }
(
(
		lv_angleStart_2_0=RULE_INT
		{
			createLeafNode(grammarAccess.getDaParams2Access().getAngleStartINTTerminalRuleCall_2_0(), "angleStart"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getDaParams2Rule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"angleStart",
	        		lv_angleStart_2_0, 
	        		"INT", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)	',' 
    {
        createLeafNode(grammarAccess.getDaParams2Access().getCommaKeyword_3(), null); 
    }
(
(
		lv_angleEnd_4_0=RULE_INT
		{
			createLeafNode(grammarAccess.getDaParams2Access().getAngleEndINTTerminalRuleCall_4_0(), "angleEnd"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getDaParams2Rule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"angleEnd",
	        		lv_angleEnd_4_0, 
	        		"INT", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
))
;





// Entry rule entryRuleDB
entryRuleDB returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getDBRule(), currentNode); }
	 iv_ruleDB=ruleDB 
	 { $current=$iv_ruleDB.current; } 
	 EOF 
;

// Rule DB
ruleDB returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(	'DB' 
    {
        createLeafNode(grammarAccess.getDBAccess().getDBKeyword_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getDBAccess().getDp0PointParserRuleCall_1_0(), currentNode); 
	    }
		lv_dp0_1_0=rulePoint		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getDBRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"dp0",
	        		lv_dp0_1_0, 
	        		"Point", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)(	',' 
    {
        createLeafNode(grammarAccess.getDBAccess().getCommaKeyword_2(), null); 
    }
)?(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getDBAccess().getDp1PointParserRuleCall_3_0(), currentNode); 
	    }
		lv_dp1_3_0=rulePoint		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getDBRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"dp1",
	        		lv_dp1_3_0, 
	        		"Point", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))
;





// Entry rule entryRuleAT
entryRuleAT returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getATRule(), currentNode); }
	 iv_ruleAT=ruleAT 
	 { $current=$iv_ruleAT.current; } 
	 EOF 
;

// Rule AT
ruleAT returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(	'AT' 
    {
        createLeafNode(grammarAccess.getATAccess().getATKeyword_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getATAccess().getLpPointParserRuleCall_1_0(), currentNode); 
	    }
		lv_lp_1_0=rulePoint		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getATRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"lp",
	        		lv_lp_1_0, 
	        		"Point", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))
;





// Rule ClassType
ruleClassType returns [Enumerator current=null] 
    @init { setCurrentLookahead(); resetLookahead(); }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((	'A' 
	{
        $current = grammarAccess.getClassTypeAccess().getAEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
        createLeafNode(grammarAccess.getClassTypeAccess().getAEnumLiteralDeclaration_0(), null); 
    }
)
    |(	'B' 
	{
        $current = grammarAccess.getClassTypeAccess().getBEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
        createLeafNode(grammarAccess.getClassTypeAccess().getBEnumLiteralDeclaration_1(), null); 
    }
)
    |(	'C' 
	{
        $current = grammarAccess.getClassTypeAccess().getCEnumLiteralDeclaration_2().getEnumLiteral().getInstance();
        createLeafNode(grammarAccess.getClassTypeAccess().getCEnumLiteralDeclaration_2(), null); 
    }
)
    |(	'D' 
	{
        $current = grammarAccess.getClassTypeAccess().getDEnumLiteralDeclaration_3().getEnumLiteral().getInstance();
        createLeafNode(grammarAccess.getClassTypeAccess().getDEnumLiteralDeclaration_3(), null); 
    }
)
    |(	'E' 
	{
        $current = grammarAccess.getClassTypeAccess().getEEnumLiteralDeclaration_4().getEnumLiteral().getInstance();
        createLeafNode(grammarAccess.getClassTypeAccess().getEEnumLiteralDeclaration_4(), null); 
    }
)
    |(	'F' 
	{
        $current = grammarAccess.getClassTypeAccess().getFEnumLiteralDeclaration_5().getEnumLiteral().getInstance();
        createLeafNode(grammarAccess.getClassTypeAccess().getFEnumLiteralDeclaration_5(), null); 
    }
)
    |(	'G' 
	{
        $current = grammarAccess.getClassTypeAccess().getGEnumLiteralDeclaration_6().getEnumLiteral().getInstance();
        createLeafNode(grammarAccess.getClassTypeAccess().getGEnumLiteralDeclaration_6(), null); 
    }
)
    |(	'Q' 
	{
        $current = grammarAccess.getClassTypeAccess().getQEnumLiteralDeclaration_7().getEnumLiteral().getInstance();
        createLeafNode(grammarAccess.getClassTypeAccess().getQEnumLiteralDeclaration_7(), null); 
    }
)
    |(	'R' 
	{
        $current = grammarAccess.getClassTypeAccess().getREnumLiteralDeclaration_8().getEnumLiteral().getInstance();
        createLeafNode(grammarAccess.getClassTypeAccess().getREnumLiteralDeclaration_8(), null); 
    }
)
    |(	'W' 
	{
        $current = grammarAccess.getClassTypeAccess().getWEnumLiteralDeclaration_9().getEnumLiteral().getInstance();
        createLeafNode(grammarAccess.getClassTypeAccess().getWEnumLiteralDeclaration_9(), null); 
    }
)
    |(	'P' 
	{
        $current = grammarAccess.getClassTypeAccess().getPEnumLiteralDeclaration_10().getEnumLiteral().getInstance();
        createLeafNode(grammarAccess.getClassTypeAccess().getPEnumLiteralDeclaration_10(), null); 
    }
)
    |(	'GP' 
	{
        $current = grammarAccess.getClassTypeAccess().getGPEnumLiteralDeclaration_11().getEnumLiteral().getInstance();
        createLeafNode(grammarAccess.getClassTypeAccess().getGPEnumLiteralDeclaration_11(), null); 
    }
)
    |(	'TMZ' 
	{
        $current = grammarAccess.getClassTypeAccess().getTMZEnumLiteralDeclaration_12().getEnumLiteral().getInstance();
        createLeafNode(grammarAccess.getClassTypeAccess().getTMZEnumLiteralDeclaration_12(), null); 
    }
)
    |(	'CTR' 
	{
        $current = grammarAccess.getClassTypeAccess().getCTREnumLiteralDeclaration_13().getEnumLiteral().getInstance();
        createLeafNode(grammarAccess.getClassTypeAccess().getCTREnumLiteralDeclaration_13(), null); 
    }
)
    |(	'Restricted' 
	{
        $current = grammarAccess.getClassTypeAccess().getRestrictedEnumLiteralDeclaration_14().getEnumLiteral().getInstance();
        createLeafNode(grammarAccess.getClassTypeAccess().getRestrictedEnumLiteralDeclaration_14(), null); 
    }
)
    |(	'UKN' 
	{
        $current = grammarAccess.getClassTypeAccess().getUKNEnumLiteralDeclaration_15().getEnumLiteral().getInstance();
        createLeafNode(grammarAccess.getClassTypeAccess().getUKNEnumLiteralDeclaration_15(), null); 
    }
));



// Rule Units
ruleUnits returns [Enumerator current=null] 
    @init { setCurrentLookahead(); resetLookahead(); }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((	'ft' 
	{
        $current = grammarAccess.getUnitsAccess().getFeedEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
        createLeafNode(grammarAccess.getUnitsAccess().getFeedEnumLiteralDeclaration_0(), null); 
    }
)
    |(	'm' 
	{
        $current = grammarAccess.getUnitsAccess().getMeterEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
        createLeafNode(grammarAccess.getUnitsAccess().getMeterEnumLiteralDeclaration_1(), null); 
    }
)
    |(	'MSL' 
	{
        $current = grammarAccess.getUnitsAccess().getMslEnumLiteralDeclaration_2().getEnumLiteral().getInstance();
        createLeafNode(grammarAccess.getUnitsAccess().getMslEnumLiteralDeclaration_2(), null); 
    }
)
    |(	'm MSL' 
	{
        $current = grammarAccess.getUnitsAccess().getM_mslEnumLiteralDeclaration_3().getEnumLiteral().getInstance();
        createLeafNode(grammarAccess.getUnitsAccess().getM_mslEnumLiteralDeclaration_3(), null); 
    }
)
    |(	'ft MSL' 
	{
        $current = grammarAccess.getUnitsAccess().getFt_mslEnumLiteralDeclaration_4().getEnumLiteral().getInstance();
        createLeafNode(grammarAccess.getUnitsAccess().getFt_mslEnumLiteralDeclaration_4(), null); 
    }
)
    |(	'AGL' 
	{
        $current = grammarAccess.getUnitsAccess().getAglEnumLiteralDeclaration_5().getEnumLiteral().getInstance();
        createLeafNode(grammarAccess.getUnitsAccess().getAglEnumLiteralDeclaration_5(), null); 
    }
)
    |(	'm AGL' 
	{
        $current = grammarAccess.getUnitsAccess().getM_aglEnumLiteralDeclaration_6().getEnumLiteral().getInstance();
        createLeafNode(grammarAccess.getUnitsAccess().getM_aglEnumLiteralDeclaration_6(), null); 
    }
)
    |(	'ft AGL' 
	{
        $current = grammarAccess.getUnitsAccess().getFt_AGLEnumLiteralDeclaration_7().getEnumLiteral().getInstance();
        createLeafNode(grammarAccess.getUnitsAccess().getFt_AGLEnumLiteralDeclaration_7(), null); 
    }
)
    |(	'AMSL' 
	{
        $current = grammarAccess.getUnitsAccess().getAMSLEnumLiteralDeclaration_8().getEnumLiteral().getInstance();
        createLeafNode(grammarAccess.getUnitsAccess().getAMSLEnumLiteralDeclaration_8(), null); 
    }
)
    |(	'm AMSL' 
	{
        $current = grammarAccess.getUnitsAccess().getM_AMSLEnumLiteralDeclaration_9().getEnumLiteral().getInstance();
        createLeafNode(grammarAccess.getUnitsAccess().getM_AMSLEnumLiteralDeclaration_9(), null); 
    }
));



// Rule WE
ruleWE returns [Enumerator current=null] 
    @init { setCurrentLookahead(); resetLookahead(); }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((	'W' 
	{
        $current = grammarAccess.getWEAccess().getWEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
        createLeafNode(grammarAccess.getWEAccess().getWEnumLiteralDeclaration_0(), null); 
    }
)
    |(	'E' 
	{
        $current = grammarAccess.getWEAccess().getEEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
        createLeafNode(grammarAccess.getWEAccess().getEEnumLiteralDeclaration_1(), null); 
    }
));



// Rule NS
ruleNS returns [Enumerator current=null] 
    @init { setCurrentLookahead(); resetLookahead(); }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((	'N' 
	{
        $current = grammarAccess.getNSAccess().getNEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
        createLeafNode(grammarAccess.getNSAccess().getNEnumLiteralDeclaration_0(), null); 
    }
)
    |(	'S' 
	{
        $current = grammarAccess.getNSAccess().getSEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
        createLeafNode(grammarAccess.getNSAccess().getSEnumLiteralDeclaration_1(), null); 
    }
));



RULE_REAL : '-'? RULE_INT+ '.' RULE_INT+;

RULE_SL_COMMENT : '*' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' ('b'|'t'|'n'|'f'|'r'|'"'|'\''|'\\')|~(('\\'|'"')))* '"'|'\'' ('\\' ('b'|'t'|'n'|'f'|'r'|'"'|'\''|'\\')|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;


